/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Get a component token safely with fallback
 * @param {String} $component - Component name
 * @param {String} $category - Category within component
 * @param {String} $token - Token name
 * @param {*} $fallback - Fallback value if token doesn't exist
 * @return {*} Token value or fallback
 */
/**
 * Get a theme color safely with fallback
 * @param {String} $name - Color name
 * @param {String} $variant - Color variant (base, light, dark, alt)
 * @param {*} $fallback - Fallback value if color doesn't exist
 * @return {*} Color value or fallback
 */
/**
 * Get a spacing value safely with fallback
 * @param {String} $size - Spacing size
 * @param {*} $fallback - Fallback value if spacing doesn't exist
 * @return {*} Spacing value or fallback
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
h1, h2, h3, h4 {
  text-transform: uppercase;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
@keyframes slideIn {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
@keyframes slideDown {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes scale {
  from {
    transform: scale(0.98);
  }
  to {
    transform: scale(1);
  }
}
@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
@keyframes fullscreenEnter {
  from {
    opacity: 0;
    transform: scale(0.98);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes fullscreenExit {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.98);
  }
}
.tools-root {
  --fullscreen-transition-duration: 0.4s;
  --fullscreen-transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
  --fullscreen-backdrop-blur: 4px;
  --fullscreen-border-radius: 16px;
  --fullscreen-shadow-color: rgba(0, 0, 0, 0.2);
  --fullscreen-border-color: rgba(255, 255, 255, 0.05);
  --fullscreen-toggle-size: clamp(32px, 5vw, 40px);
  --fullscreen-header-offset: max(60px, 10vh);
  --tool-button-bg: rgba(255, 255, 255, 0.1);
  --tool-button-border: rgba(255, 255, 255, 0.2);
  --tool-button-hover-bg: rgba(255, 255, 255, 0.15);
  --tool-input-bg: rgba(255, 255, 255, 0.1);
  --tool-input-border: rgba(255, 255, 255, 0.2);
  --tool-input-focus-bg: rgba(255, 255, 255, 0.15);
  --tool-input-focus-border: rgba(255, 255, 255, 0.4);
}

body.is-fullscreen {
  overflow: hidden !important;
  touch-action: none;
}
body.is-fullscreen #magicContainer,
body.is-fullscreen .vignette-top,
body.is-fullscreen .vignette-bottom,
body.is-fullscreen .vignette-left,
body.is-fullscreen .vignette-right {
  display: none !important;
}

.tool-card {
  background-color: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border-radius: 4px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
}
.tool-card:hover {
  background-color: rgba(255, 255, 255, 0.2);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.15);
}
.tool-card h2, .tool-card .card-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
}
.tool-card h3, .tool-card .card-subtitle {
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 0.5rem;
}
.tool-card p, .tool-card .card-text {
  font-size: 1rem;
  line-height: 1.5;
}
.tool-card .metadata, .tool-card .card-info, .tool-card .card-meta {
  font-size: 0.875rem;
  color: var(--color-text-light);
}
@media only screen and (max-width: 37.5em) {
  .tool-card h2, .tool-card .card-title {
    font-size: 1rem;
  }
  .tool-card h3, .tool-card .card-subtitle {
    font-size: 0.875rem;
  }
  .tool-card p, .tool-card .card-text {
    font-size: 0.875rem;
  }
}
.tool-card {
  padding: 2rem;
  border-radius: 0.25rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.tool-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}
.tool-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  cursor: pointer;
}
.tool-card--selected {
  background-color: var(--color-grey-dark-3);
  border-color: var(--color-sage);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}
.tool-card__icon {
  font-size: 2rem;
  margin-bottom: 1rem;
  color: var(--color-sage);
}
.tool-card__content {
  text-align: center;
}
.tool-card__title {
  margin-bottom: 0.5rem;
}
.tool-card__description {
  color: var(--color-text-light);
}

.tool-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}
@media only screen and (max-width: 50em) {
  .tool-container {
    padding: 1rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .tool-container {
    grid-template-columns: 1fr;
  }
}

.tool-content-container {
  width: 100%;
  max-width: 1200px;
  margin: 2rem auto;
  min-height: 400px;
}

.button {
  border: none;
  outline: none;
  cursor: pointer;
  transition: all 0.2s ease;
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
}
.button:focus-visible {
  outline: 2px solid var(--color-sage);
  outline-offset: 2px;
}
.button:active {
  transform: scale(0.95);
}

.icon-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--color-grey-dark-3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: var(--color-text);
  border-radius: 50%;
  width: var(--fullscreen-toggle-size);
  height: var(--fullscreen-toggle-size);
}
.icon-button:hover {
  background: var(--color-grey-dark-4);
  transform: scale(1.05);
}

.flex-center, .error-container, .loading-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
}

.error-container, .loading-wrapper {
  flex-direction: column;
  gap: 1rem;
  padding: 2rem;
  text-align: center;
}

.loading-wrapper i {
  font-size: 2rem;
  animation: rotate 1s linear infinite;
}
