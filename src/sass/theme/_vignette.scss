@use "sass:map";
@use "sass:color";
@use "sass:math";
@use "../mixins" as mixins;
@use "../tokens" as tokens; // Import tokens

// Configuration Map
$config: (
  blur: (
    strength: 70px,
    saturation: 2.2,
    fallback-opacity: 0.6,
    glow-color: rgba(255, 255, 255, 0.2),
  ),
  sides: (
    top: (
      height-desktop: 8rem,
      height-mobile: 5rem,
      blur-strength: 70px,
      gradient-stop: 80%,
      opacity: 0.9,
    ),
    bottom: (
      height-desktop: 3rem,
      height-mobile: 2rem,
      blur-strength: 70px,
      gradient-stop: 80%,
      opacity: 0.9,
    ),
    left: (
      width-desktop: 2rem,
      width-mobile: 1rem,
      blur-strength: 70px,
      gradient-stop: 80%,
      opacity: 0.9,
    ),
    right: (
      width-desktop: 2rem,
      width-mobile: 1rem,
      blur-strength: 70px,
      gradient-stop: 80%,
      opacity: 0.9,
    ),
  ),
  gradient: (
    colors: (
      start: rgba(0, 0, 0, 0),
      // Fully transparent
      middle: rgba(0, 0, 0, 0.8),
      // Darker fade
      end: rgba(0, 0, 0, 1),
      // Fully opaque black
    ),
  ),
  animation: (
    duration: 3s,
    delay: 0.3s,
    timing: cubic-bezier(0.4, 0, 0.2, 1),
  ),
  transition: cubic-bezier(0.4, 0, 0.2, 1),
  z-index: var(--z-index-vignette),
);

// Breakpoints for responsive design
$breakpoints: tokens.$breakpoints;

// Z-index for vignette elements
$z-index-vignette: tokens.z('vignette');

// Root Variables
:root {
  & {
    --vignette-blur-strength: #{map.get($config, "blur", "strength")};
    --vignette-blur-saturation: #{map.get($config, "blur", "saturation")};
    --vignette-blur-fallback-opacity: #{map.get($config, "blur", "fallback-opacity")};
    --vignette-blur-glow-color: #{map.get($config, "blur", "glow-color")};
    
    // Side-specific variables
    @each $side, $values in map.get($config, "sides") {
      --vignette-#{$side}-height-desktop: #{map.get($values, "height-desktop")};
      --vignette-#{$side}-height-mobile: #{map.get($values, "height-mobile")};
      --vignette-#{$side}-width-desktop: #{map.get($values, "width-desktop")};
      --vignette-#{$side}-width-mobile: #{map.get($values, "width-mobile")};
      --vignette-#{$side}-blur-strength: #{map.get($values, "blur-strength")};
      --vignette-#{$side}-gradient-stop: #{map.get($values, "gradient-stop")};
      --vignette-#{$side}-opacity: #{map.get($values, "opacity")};
    }
    
    // Gradient variables
    --vignette-gradient-light-start: #{map.get($config, "gradient", "light", "start")};
    --vignette-gradient-light-end: #{map.get($config, "gradient", "light", "end")};
    --vignette-gradient-dark-start: #{map.get($config, "gradient", "dark", "start")};
    --vignette-gradient-dark-end: #{map.get($config, "gradient", "dark", "end")};
    
    // Z-index
    --vignette-z-index: #{$z-index-vignette};
  }
}

// Getter Functions
@function get-config($keys...) {
  $value: $config;

  @each $key in $keys {
    $value: map.get($value, $key);
  }

  @return $value;
}

// Animation Mixin
@mixin vignette-animation($direction) {
  $duration: get-config("animation", "duration");
  $delay: get-config("animation", "delay");
  $timing: get-config("animation", "timing");

  & {
    animation: vignette-#{$direction} $duration $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards;
  }
}

// Gradient Mask Mixin
@mixin gradient-mask($direction: "to bottom") {
  $gradient-colors: get-config("gradient", "colors");
  $opacity: get-config("gradient", "opacity");
  $stop: get-config("gradient", "stop");

  & {
    mask-image: linear-gradient(
      #{$direction},
      map.get($gradient-colors, "start"),
      map.get($gradient-colors, "middle") $stop,
      map.get($gradient-colors, "end")
    );
  }
}

// Blur + Frosted Glow Mixin
@mixin frosted-glow($side) {
  $strength: get-config("sides", $side, "blur-strength");
  $saturation: get-config("blur", "saturation");
  $glow-color: get-config("blur", "glow-color");

  backdrop-filter: blur($strength) saturate($saturation);

  // Add a subtle glow around the edges
  box-shadow:
    0 0 60px $glow-color,
    0 0 30px $glow-color;

  // Fallback for unsupported browsers
  @supports not (backdrop-filter: blur($strength)) {
    background: rgba(0, 0, 0, get-config("blur", "fallback-opacity"));
  }
}

// Base Vignette Styles
%vignette-base {
  position: fixed;
  width: 100%;
  pointer-events: none;
  z-index: get-config("z-index");
  transition: all 0.5s get-config("transition");
}

// Main Vignette Classes
.vignette {
  &-top {
    @extend %vignette-base;

    top: 0;
    left: 0;
    height: get-config("sides", "top", "height-desktop");

    &::before {
      content: "";
      position: absolute;
      inset: 0;

      @include frosted-glow("top");
      @include gradient-mask("to top");
      @include vignette-animation("slide-down");

      & {
        opacity: get-config("sides", "top", "opacity");
      }
    }

    @include mixins.respond("small") {
      height: get-config("sides", "top", "height-mobile");
    }
  }

  &-bottom {
    @extend %vignette-base;

    bottom: 0;
    left: 0;
    height: get-config("sides", "bottom", "height-desktop");

    &::before {
      content: "";
      position: absolute;
      inset: 0;

      @include frosted-glow("bottom");
      @include gradient-mask("to bottom");
      @include vignette-animation("slide-up");

      & {
        opacity: get-config("sides", "bottom", "opacity");
      }
    }

    @include mixins.respond("small") {
      height: get-config("sides", "bottom", "height-mobile");
    }
  }

  &-left {
    @extend %vignette-base;

    top: 0;
    left: 0;
    height: 100%;
    width: get-config("sides", "left", "width-desktop");

    &::before {
      content: "";
      position: absolute;
      inset: 0;

      @include frosted-glow("left");
      @include gradient-mask("to left");
      @include vignette-animation("slide-right");

      & {
        opacity: get-config("sides", "left", "opacity");
      }
    }

    @include mixins.respond("small") {
      width: get-config("sides", "left", "width-mobile");
    }
  }

  &-right {
    @extend %vignette-base;

    top: 0;
    right: 0;
    height: 100%;
    width: get-config("sides", "right", "width-desktop");

    &::before {
      content: "";
      position: absolute;
      inset: 0;

      @include frosted-glow("right");
      @include gradient-mask("to right");
      @include vignette-animation("slide-left");

      & {
        opacity: get-config("sides", "right", "opacity");
      }
    }

    @include mixins.respond("small") {
      width: get-config("sides", "right", "width-mobile");
    }
  }
}

// Keyframes for Vignette Animations
@keyframes vignette-slide-down {
  from {
    transform: translateY(-120%);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes vignette-slide-up {
  from {
    transform: translateY(120%);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes vignette-slide-right {
  from {
    transform: translateX(-120%);
    opacity: 0;
  }

  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes vignette-slide-left {
  from {
    transform: translateX(120%);
    opacity: 0;
  }

  to {
    transform: translateX(0);
    opacity: 1;
  }
}

// Light theme adjustments
.light-theme {
  .vignette {
    &__top, &__bottom, &__left, &__right {
      background-image: linear-gradient(
        var(--vignette-gradient-light-start) 0%,
        var(--vignette-gradient-light-end) 100%
      );
    }
  }
}

// Reduced motion adjustments
@media (prefers-reduced-motion: reduce) {
  .vignette {
    &__top, &__bottom, &__left, &__right {
      transition: none;
    }
  }
}

// Fallback for browsers that don't support backdrop-filter
@supports not (backdrop-filter: blur(1px)) {
  .vignette {
    &__top, &__bottom, &__left, &__right {
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      opacity: var(--vignette-blur-fallback-opacity);
    }
  }
}

// Export for use in other files
:export {
  vignetteZIndex: $z-index-vignette;
}

@include mixins.breakpoint('small') {
  .vignette {
    &__top {
      height: map.get(map.get(map.get($config, "sides"), "top"), "height-mobile");
    }

    &__bottom {
      height: map.get(map.get(map.get($config, "sides"), "bottom"), "height-mobile");
    }

    &__left {
      width: map.get(map.get(map.get($config, "sides"), "left"), "width-mobile");
    }

    &__right {
      width: map.get(map.get(map.get($config, "sides"), "right"), "width-mobile");
    }
  }
}
