/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Get a component token safely with fallback
 * @param {String} $component - Component name
 * @param {String} $category - Category within component
 * @param {String} $token - Token name
 * @param {*} $fallback - Fallback value if token doesn't exist
 * @return {*} Token value or fallback
 */
/**
 * Get a theme color safely with fallback
 * @param {String} $name - Color name
 * @param {String} $variant - Color variant (base, light, dark, alt)
 * @param {*} $fallback - Fallback value if color doesn't exist
 * @return {*} Color value or fallback
 */
/**
 * Get a spacing value safely with fallback
 * @param {String} $size - Spacing size
 * @param {*} $fallback - Fallback value if spacing doesn't exist
 * @return {*} Spacing value or fallback
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
:root {
  --vignette-blur-strength: 70px;
  --vignette-blur-saturation: 2.2;
  --vignette-blur-fallback-opacity: 0.6;
  --vignette-blur-glow-color: rgba(255, 255, 255, 0.2);
  --vignette-top-height-desktop: 8rem;
  --vignette-top-height-mobile: 5rem;
  --vignette-top-width-desktop: ;
  --vignette-top-width-mobile: ;
  --vignette-top-blur-strength: 70px;
  --vignette-top-gradient-stop: 80%;
  --vignette-top-opacity: 0.9;
  --vignette-bottom-height-desktop: 3rem;
  --vignette-bottom-height-mobile: 2rem;
  --vignette-bottom-width-desktop: ;
  --vignette-bottom-width-mobile: ;
  --vignette-bottom-blur-strength: 70px;
  --vignette-bottom-gradient-stop: 80%;
  --vignette-bottom-opacity: 0.9;
  --vignette-left-height-desktop: ;
  --vignette-left-height-mobile: ;
  --vignette-left-width-desktop: 2rem;
  --vignette-left-width-mobile: 1rem;
  --vignette-left-blur-strength: 70px;
  --vignette-left-gradient-stop: 80%;
  --vignette-left-opacity: 0.9;
  --vignette-right-height-desktop: ;
  --vignette-right-height-mobile: ;
  --vignette-right-width-desktop: 2rem;
  --vignette-right-width-mobile: 1rem;
  --vignette-right-blur-strength: 70px;
  --vignette-right-gradient-stop: 80%;
  --vignette-right-opacity: 0.9;
  --vignette-gradient-light-start: ;
  --vignette-gradient-light-end: ;
  --vignette-gradient-dark-start: ;
  --vignette-gradient-dark-end: ;
  --vignette-z-index: 30;
}

.vignette-right, .vignette-left, .vignette-bottom, .vignette-top {
  position: fixed;
  width: 100%;
  pointer-events: none;
  z-index: var(--z-index-vignette);
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.vignette-top {
  top: 0;
  left: 0;
  height: 8rem;
}
.vignette-top::before {
  content: "";
  position: absolute;
  inset: 0;
  backdrop-filter: blur(70px) saturate(2.2);
  box-shadow: 0 0 60px rgba(255, 255, 255, 0.2), 0 0 30px rgba(255, 255, 255, 0.2);
}
@supports not (backdrop-filter: blur(70px)) {
  .vignette-top::before {
    background: rgba(0, 0, 0, 0.6);
  }
}
.vignette-top::before {
  mask-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8), rgb(0, 0, 0));
}
.vignette-top::before {
  animation: vignette-slide-down 3s cubic-bezier(0.4, 0, 0.2, 1);
  animation-delay: 0.3s;
  animation-fill-mode: forwards;
}
.vignette-top::before {
  opacity: 0.9;
}
@media only screen and (max-width: 37.5em) {
  .vignette-top {
    height: 5rem;
  }
}
.vignette-bottom {
  bottom: 0;
  left: 0;
  height: 3rem;
}
.vignette-bottom::before {
  content: "";
  position: absolute;
  inset: 0;
  backdrop-filter: blur(70px) saturate(2.2);
  box-shadow: 0 0 60px rgba(255, 255, 255, 0.2), 0 0 30px rgba(255, 255, 255, 0.2);
}
@supports not (backdrop-filter: blur(70px)) {
  .vignette-bottom::before {
    background: rgba(0, 0, 0, 0.6);
  }
}
.vignette-bottom::before {
  mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8), rgb(0, 0, 0));
}
.vignette-bottom::before {
  animation: vignette-slide-up 3s cubic-bezier(0.4, 0, 0.2, 1);
  animation-delay: 0.3s;
  animation-fill-mode: forwards;
}
.vignette-bottom::before {
  opacity: 0.9;
}
@media only screen and (max-width: 37.5em) {
  .vignette-bottom {
    height: 2rem;
  }
}
.vignette-left {
  top: 0;
  left: 0;
  height: 100%;
  width: 2rem;
}
.vignette-left::before {
  content: "";
  position: absolute;
  inset: 0;
  backdrop-filter: blur(70px) saturate(2.2);
  box-shadow: 0 0 60px rgba(255, 255, 255, 0.2), 0 0 30px rgba(255, 255, 255, 0.2);
}
@supports not (backdrop-filter: blur(70px)) {
  .vignette-left::before {
    background: rgba(0, 0, 0, 0.6);
  }
}
.vignette-left::before {
  mask-image: linear-gradient(to left, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8), rgb(0, 0, 0));
}
.vignette-left::before {
  animation: vignette-slide-right 3s cubic-bezier(0.4, 0, 0.2, 1);
  animation-delay: 0.3s;
  animation-fill-mode: forwards;
}
.vignette-left::before {
  opacity: 0.9;
}
@media only screen and (max-width: 37.5em) {
  .vignette-left {
    width: 1rem;
  }
}
.vignette-right {
  top: 0;
  right: 0;
  height: 100%;
  width: 2rem;
}
.vignette-right::before {
  content: "";
  position: absolute;
  inset: 0;
  backdrop-filter: blur(70px) saturate(2.2);
  box-shadow: 0 0 60px rgba(255, 255, 255, 0.2), 0 0 30px rgba(255, 255, 255, 0.2);
}
@supports not (backdrop-filter: blur(70px)) {
  .vignette-right::before {
    background: rgba(0, 0, 0, 0.6);
  }
}
.vignette-right::before {
  mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8), rgb(0, 0, 0));
}
.vignette-right::before {
  animation: vignette-slide-left 3s cubic-bezier(0.4, 0, 0.2, 1);
  animation-delay: 0.3s;
  animation-fill-mode: forwards;
}
.vignette-right::before {
  opacity: 0.9;
}
@media only screen and (max-width: 37.5em) {
  .vignette-right {
    width: 1rem;
  }
}

@keyframes vignette-slide-down {
  from {
    transform: translateY(-120%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
@keyframes vignette-slide-up {
  from {
    transform: translateY(120%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
@keyframes vignette-slide-right {
  from {
    transform: translateX(-120%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}
@keyframes vignette-slide-left {
  from {
    transform: translateX(120%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}
.light-theme .vignette__top, .light-theme .vignette__bottom, .light-theme .vignette__left, .light-theme .vignette__right {
  background-image: linear-gradient(var(--vignette-gradient-light-start) 0%, var(--vignette-gradient-light-end) 100%);
}

@media (prefers-reduced-motion: reduce) {
  .vignette__top, .vignette__bottom, .vignette__left, .vignette__right {
    transition: none;
  }
}
@supports not (backdrop-filter: blur(1px)) {
  .vignette__top, .vignette__bottom, .vignette__left, .vignette__right {
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
    opacity: var(--vignette-blur-fallback-opacity);
  }
}
:export {
  vignetteZIndex: 30;
}

@media only screen and (max-width: 37.5em) {
  .vignette__top {
    height: 5rem;
  }
  .vignette__bottom {
    height: 2rem;
  }
  .vignette__left {
    width: 1rem;
  }
  .vignette__right {
    width: 1rem;
  }
}
/**
 * CSS Custom Properties Generator
 *
 * This file generates CSS custom properties (variables) from the design tokens
 * defined in _tokens.scss. It serves as the bridge between the SASS variables 
 * and the runtime CSS variables needed for features like theme switching.
 *
 * IMPORTANT: This file does NOT define any values directly - it only generates
 * CSS variables based on the values defined in _tokens.scss, ensuring a
 * single source of truth for all design tokens.
 *
 * @see _tokens.scss - Single source of truth for all design tokens
 */
/**
 * Extract RGB values from a color
 * Used to create CSS custom properties for colors that can be used with rgba()
 * @param {Color} $color - The color to extract RGB values from
 * @return {List} A list of RGB values
 */
/**
 * Generate theme color variables for a specific theme
 * @param {String} $theme - The theme name
 * @param {Map} $colors - The theme colors map
 */
:root {
  --color-sage-base: #0b7abd;
  --color-sage-base-rgb: 11, 122, 189;
  --color-sage-light: #1eaae0;
  --color-sage-light-rgb: 30, 170, 224;
  --color-sage-dark: #085980;
  --color-sage-dark-rgb: 8, 89, 128;
  --color-sage-alt: #0a6d8f;
  --color-sage-alt-rgb: 10, 109, 143;
  --color-coral-base: #e15b18;
  --color-coral-base-rgb: 225, 91, 24;
  --color-coral-light: #f47234;
  --color-coral-light-rgb: 244, 114, 52;
  --color-coral-dark: #c44b12;
  --color-coral-dark-rgb: 196, 75, 18;
  --color-coral-alt: #b44410;
  --color-coral-alt-rgb: 180, 68, 16;
  --color-sand-base: #a8958c;
  --color-sand-base-rgb: 168, 149, 140;
  --color-sand-light: #baa69d;
  --color-sand-light-rgb: 186, 166, 157;
  --color-sand-dark: #968475;
  --color-sand-dark-rgb: 150, 132, 117;
  --color-sand-alt: #8f7a6d;
  --color-sand-alt-rgb: 143, 122, 109;
  --color-indigo-base: #1a1a1d;
  --color-indigo-base-rgb: 26, 26, 29;
  --color-indigo-light: #2d2d32;
  --color-indigo-light-rgb: 45, 45, 50;
  --color-indigo-dark: #121214;
  --color-indigo-dark-rgb: 18, 18, 20;
  --color-indigo-alt: #252525;
  --color-indigo-alt-rgb: 37, 37, 37;
  --color-white: #fff;
  --color-white-rgb: 255, 255, 255;
  --color-gray-100: #f8f9fa;
  --color-gray-100-rgb: 248, 249, 250;
  --color-gray-200: #e9ecef;
  --color-gray-200-rgb: 233, 236, 239;
  --color-gray-300: #dee2e6;
  --color-gray-300-rgb: 222, 226, 230;
  --color-gray-400: #ced4da;
  --color-gray-400-rgb: 206, 212, 218;
  --color-gray-500: #adb5bd;
  --color-gray-500-rgb: 173, 181, 189;
  --color-gray-600: #6c757d;
  --color-gray-600-rgb: 108, 117, 125;
  --color-gray-700: #495057;
  --color-gray-700-rgb: 73, 80, 87;
  --color-gray-800: #343a40;
  --color-gray-800-rgb: 52, 58, 64;
  --color-gray-900: #212529;
  --color-gray-900-rgb: 33, 37, 41;
  --color-black: #000;
  --color-black-rgb: 0, 0, 0;
  --color-success: #458e6d;
  --color-success-rgb: 69, 142, 109;
  --color-warning: #e4aa3d;
  --color-warning-rgb: 228, 170, 61;
  --color-error: #c64530;
  --color-error-rgb: 198, 69, 48;
  --color-info: #0b7abd;
  --color-info-rgb: 11, 122, 189;
  --background-light: #f0f0f0;
  --background-dark: #1a1a1d;
  --overlay-light: rgba(255, 255, 255, 0.8);
  --overlay-dark: rgba(0, 0, 0, 0.85);
  --spacing-xxs: 0.25rem;
  --spacing-xs: 0.5rem;
  --spacing-sm: 1rem;
  --spacing-md: 1.5rem;
  --spacing-lg: 2rem;
  --spacing-xl: 2.5rem;
  --spacing-xxl: 3rem;
  --spacing-xxxl: 4rem;
  --font-size-xxs: 0.64rem;
  --font-size-xs: 0.8rem;
  --font-size-sm: 0.875rem;
  --font-size-md: 1rem;
  --font-size-lg: 1.25rem;
  --font-size-xl: 1.563rem;
  --font-size-xxl: 1.953rem;
  --font-size-xxxl: 2.441rem;
  --font-size-display: 3.815rem;
  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  --line-height-tight: 1.2;
  --line-height-normal: 1.5;
  --line-height-loose: 1.8;
  --border-radius-none: 0;
  --border-radius-sm: 0.125rem;
  --border-radius-md: 0.25rem;
  --border-radius-lg: 0.5rem;
  --border-radius-xl: 1rem;
  --border-radius-full: 9999px;
  --shadow-none: none;
  --shadow-xs: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-inner: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --z-index-base: 1;
  --z-index-tooltip: 10;
  --z-index-dropdown: 20;
  --z-index-vignette: 30;
  --z-index-modal: 40;
  --z-index-overlay: 50;
  --z-index-theme-switch: 60;
  --z-index-navbar: 70;
  --z-index-frame: 80;
  --z-index-toast: 90;
  --z-index-max: 100;
  --transition-fast: 0.15s;
  --transition-normal: 0.3s;
  --transition-slow: 0.5s;
  --transition-very-slow: 0.8s;
  --timing-default: cubic-bezier(0.4, 0, 0.2, 1);
  --timing-ease-in: cubic-bezier(0.4, 0, 1, 1);
  --timing-ease-out: cubic-bezier(0, 0, 0.2, 1);
  --timing-ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --timing-bounce: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  --layout-max-content-width: 1200px;
  --layout-container-padding: 2rem;
  --animation-duration-fast: 0.5s;
  --animation-duration-normal: 1s;
  --animation-duration-slow: 2s;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background-light: #1a1a1d;
    --background-dark: #f0f0f0;
    --overlay-light: rgba(0, 0, 0, 0.85);
    --overlay-dark: rgba(255, 255, 255, 0.8);
  }
}
.theme-dark {
  --background-light: #1a1a1d;
  --background-dark: #f0f0f0;
  --overlay-light: rgba(0, 0, 0, 0.85);
  --overlay-dark: rgba(255, 255, 255, 0.8);
}

.bg-primary {
  background-color: var(--color-sage-base);
}

.bg-secondary {
  background-color: var(--color-coral-base);
}

.bg-accent {
  background-color: var(--color-sand-base);
}

.text-primary {
  color: var(--color-sage-base);
}

.text-secondary {
  color: var(--color-coral-base);
}

.text-accent {
  color: var(--color-sand-base);
}

.light-theme {
  --background-light: #1a1a1d;
  --background-dark: #f0f0f0;
  --overlay-light: rgba(0, 0, 0, 0.85);
  --overlay-dark: rgba(255, 255, 255, 0.8);
}

.dark-theme {
  --background-light: #1a1a1d;
  --background-dark: #f0f0f0;
  --overlay-light: rgba(0, 0, 0, 0.85);
  --overlay-dark: rgba(255, 255, 255, 0.8);
}

:root {
  --lightground-color: #e5e5e5;
  --lightground-alt: #d8d8d8;
  --lightground-hover: #ccc;
  --darkground-color: #1a1a1d;
  --overlay-light: rgb(255 255 255 / 45%);
  --overlay-dark: rgb(0 0 0 / 75%);
  --shadow-light: rgb(0 0 0 / 10%);
  --shadow-dark: rgb(0 0 0 / 25%);
  --text-shadow: var(--shadow-dark);
  --color-sage: #0b7abd;
  --color-sage-light: #1eaae0;
  --color-sage-dark: #085980;
  --color-sage-rgb: 11, 122, 189;
  --color-sage-light-rgb: 30, 170, 224;
  --color-sage-dark-rgb: 8, 89, 128;
  --color-coral: #e15b18;
  --color-coral-light: #f47234;
  --color-coral-dark: #c44b12;
  --color-coral-rgb: 225, 91, 24;
  --color-coral-light-rgb: 244, 114, 52;
  --color-coral-dark-rgb: 196, 75, 18;
  --color-sand: #a8958c;
  --color-sand-light: #baa69d;
  --color-sand-dark: #968475;
  --color-sand-rgb: 168, 149, 140;
  --color-sand-light-rgb: 186, 166, 157;
  --color-sand-dark-rgb: 150, 132, 117;
  --color-indigo: #1a1a1d;
  --color-indigo-light: #2d2d32;
  --color-indigo-dark: #121214;
  --color-indigo-rgb: 26, 26, 29;
  --color-indigo-light-rgb: 45, 45, 50;
  --color-indigo-dark-rgb: 18, 18, 20;
  --color-coral-alt: #b44410;
  --color-sage-alt: #084d66;
  --color-sand-alt: #8f7a6d;
  --color-sand-darker: #776960;
  --color-sand-darker-rgb: 119, 105, 96;
  --color-indigo: #1a1a1d;
  --color-indigo-light: #2d2d32;
  --color-indigo-dark: #121214;
  --color-indigo-rgb: 26, 26, 29;
  --color-indigo-light-rgb: 45, 45, 50;
  --color-indigo-dark-rgb: 18, 18, 20;
  --color-grey-light-1: #e5e5e5;
  --color-grey-light-2: #d8d8d8;
  --color-grey-light-3: #ccc;
  --color-grey-light-4: #c0c0c0;
  --color-grey-dark-1: #2a2a2a;
  --color-grey-dark-2: #383838;
  --color-grey-dark-3: #454545;
  --color-grey-dark-4: #525252;
  --color-success: #458e6d;
  --color-warning: #e4aa3d;
  --color-error: #c64530;
  --accent-primary: var(
    --color-sage,
    #0b7abd
  );
  --accent-secondary: var(
    --color-coral,
    #e15b18
  );
  --accent-tertiary: var(
    --color-sand,
    #a8958c
  );
  --background-color: var(--darkground-color);
  --text-color: #d8e3e7;
  --profile-pic-bg-color: #cdd2d7;
  --color-hover: var(--color-sage-dark);
  --shadow-color: 0, 0, 0;
  --shadow-opacity: 0.5;
  --shadow-dark: 2px 2px 10px rgba(var(--shadow-color), var(--shadow-opacity));
  --shadow-light: 2px 2px 10px rgba(var(--shadow-color), 0.3);
  --shadow-elevation-1: 0 2px 4px rgba(var(--shadow-color), 0.1);
  --shadow-elevation-2: 0 4px 8px rgba(var(--shadow-color), 0.15);
  --tooltip-background-color: var(--color-grey-dark-4);
  --bezier-curve: cubic-bezier(0.49, -0.35, 0.56, 1.39);
  --navbar-bg-gradient: linear-gradient(
    to bottom,
    rgba(var(--shadow-color), 0.2) 0%,
    transparent 100%
  );
  --header-primary: var(--color-sage);
  --header-secondary: var(--color-coral);
  --header-tertiary: var(--color-sand);
  --header-hover: var(--color-coral-light);
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: 62.5%;
  scroll-behavior: auto;
}
html {
  height: -webkit-fill-available;
  padding-top: env(safe-area-inset-top);
}

body {
  font-family: "Open Sans", sans-serif;
  font-weight: 400;
  font-size: 1.4rem;
  line-height: 1.6;
  background: var(--background-color);
  color: var(--text-color);
  transition: background-color var(--theme-transition-duration) var(--theme-transition-timing), color var(--theme-transition-duration) var(--theme-transition-timing);
  will-change: background-color, color;
  padding-bottom: env(safe-area-inset-bottom);
  position: relative;
  min-height: 100vh;
  overflow-x: hidden;
}
body * {
  transition: background-color var(--theme-transition-duration) var(--theme-transition-timing), border-color var(--theme-transition-duration) var(--theme-transition-timing), opacity var(--theme-transition-duration) var(--theme-transition-timing);
}

@viewport {
  width: 100vw;
}
body {
  transition: background-color var(--theme-transition-duration) var(--theme-transition-timing), color var(--theme-transition-duration) var(--theme-transition-timing), border-color var(--theme-transition-duration) var(--theme-transition-timing), box-shadow var(--theme-transition-duration) var(--theme-transition-timing);
}
body.light-theme {
  --background-color: var(--color-grey-light-1);
  --text-color: var(--color-grey-dark-1);
  --text-color-muted: var(--color-grey-dark-2);
  --shadow-color: var(--color-light-rgb);
  --profile-pic-bg-color: var(--lightground-alt);
  --text-shadow: 0 2px 10px rgba(255, 255, 255, 0.4);
}
body.light-theme {
  --color-primary: var(--color-sage-dark);
  --color-secondary: var(--color-coral);
  --color-tertiary: var(--color-sand-dark);
  --color-hover: var(--color-coral-dark);
  --hover-primary: var(--color-sage-dark);
  --hover-secondary: var(--color-coral-dark);
  --hover-tertiary: var(--color-sand-dark);
  --header-primary: var(--color-sage);
  --header-secondary: var(--color-coral);
  --header-tertiary: var(--color-sand);
  --header-hover: var(--color-coral-dark);
}
body.dark-theme {
  --background-color: var(--darkground-color);
  --text-color: var(--color-grey-light-1);
  --text-color-muted: var(--color-grey-light-2);
  --shadow-color: var(--color-dark-rgb);
  --profile-pic-bg-color: var(--color-grey-dark-3);
  --text-shadow: 2px 2px 10px rgba(var(--shadow-color), var(--shadow-opacity));
}
body.dark-theme {
  --color-primary: var(--color-sage-light);
  --color-secondary: var(--color-coral-light);
  --color-tertiary: var(--color-sand-light);
  --color-hover: var(--color-coral-light);
  --hover-primary: var(--color-sage-light);
  --hover-secondary: var(--color-coral-light);
  --hover-tertiary: var(--color-sand-light);
  --header-primary: var(--color-sage);
  --header-secondary: var(--color-coral);
  --header-tertiary: var(--color-sand);
  --header-hover: var(--color-coral-light);
}
body * {
  transition: background-color var(--theme-transition-duration) var(--theme-transition-timing), border-color var(--theme-transition-duration) var(--theme-transition-timing), box-shadow var(--theme-transition-duration) var(--theme-transition-timing), opacity var(--theme-transition-duration) var(--theme-transition-timing);
}

@supports (-webkit-backdrop-filter: none) {
  .glass-effect {
    backdrop-filter: blur(10px);
    will-change: backdrop-filter;
  }
}
button,
a {
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  user-select: none;
}

.scroll-container {
  overflow-y: scroll;
  overscroll-behavior-y: contain;
}

html::-webkit-scrollbar,
body::-webkit-scrollbar,
*::-webkit-scrollbar {
  display: none !important;
  width: 0 !important;
}
html,
body,
* {
  -ms-overflow-style: none !important; /* IE and Edge */
  scrollbar-width: none !important; /* Firefox */
}

:root {
  --navbar-padding-mobile: 1rem 1.5rem;
  --navbar-padding-desktop: 1rem 2rem;
  --scroll-button-size-desktop: 40px;
  --scroll-button-size-mobile: 42px;
  --underline-height: 0.1em;
  --transition-standard: 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.navbar {
  --local-font-size: 2rem;
  position: fixed;
  inset: 0 0 auto 0;
  z-index: var(--z-index-navbar);
  display: flex;
  flex-flow: row-reverse nowrap;
  margin: 0;
  list-style-type: none;
  background: var(--navbar-bg-gradient);
  transition: right var(--transition-standard);
  overflow: visible !important;
}
.navbar.dragging {
  transition: right 0.2s ease-out;
}
.navbar.slide-back {
  right: 0;
}
.navbar .theme-switch {
  margin-left: 1.5rem;
  margin-right: auto;
  align-self: center;
  order: 2;
  transform: scale(1);
  transition: transform 0.3s ease;
}
.navbar__item {
  order: 1;
  padding: var(--navbar-padding-desktop);
  color: var(--text);
  font-size: var(--local-font-size);
  font-weight: 600;
  text-transform: uppercase;
  transform: translateX(0);
  transition: transform var(--transition-standard);
}
.navbar__item::after {
  content: "";
  display: block;
  width: 0;
  height: calc(var(--underline-height) * 1.2);
  margin-top: 0.4rem;
  background-color: transparent;
  transition: all var(--transition-standard);
}
.navbar__item:hover::after {
  width: 100%;
  background-color: var(--text);
}
.navbar__item a {
  color: inherit;
  text-decoration: none;
  transition: color 0.2s;
}
.navbar__item a:hover {
  color: var(--color-sand-dark);
}

.scroll-to-top {
  position: fixed;
  bottom: 25px;
  right: 25px;
  width: var(--scroll-button-size-desktop);
  height: var(--scroll-button-size-desktop);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  border-radius: 50%;
  background-color: var(--background);
  color: var(--text);
  border: 2px solid var(--text);
  cursor: pointer;
  opacity: 0;
  transform: translateY(20px);
  pointer-events: none;
  z-index: 1000;
  transition: all var(--transition-standard);
}
.scroll-to-top.visible {
  opacity: 0.7;
  transform: translateY(0);
  pointer-events: auto;
}
.scroll-to-top:hover {
  opacity: 1;
  transform: translateY(-2px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.scroll-to-top:focus {
  outline: none;
  box-shadow: 0 0 0 3px var(--text);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@media only screen and (max-width: 37.5em) {
  .navbar {
    --local-font-size: 1.8rem;
  }
  .navbar .theme-switch {
    transform: scale(1.2);
  }
}
@media only screen and (max-width: 31.25em) {
  .navbar {
    --local-font-size: 1.6rem;
    padding: 0.75rem;
  }
  .navbar__item {
    padding: var(--navbar-padding-mobile);
  }
  .navbar__item::after {
    margin-top: 0.4rem;
    height: calc(var(--underline-height) * 1.2);
  }
  .navbar .theme-switch {
    transform: scale(1.3);
    margin-left: 1.25rem;
  }
  .scroll-to-top {
    bottom: 25px;
    right: 25px;
    width: var(--scroll-button-size-mobile);
    height: var(--scroll-button-size-mobile);
    font-size: 24px;
  }
}
