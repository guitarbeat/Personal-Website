// Import required SASS modules and utilities
@use "base";
@use "mixins" as *;
@use "sass:map";
@use "sass:color";

// Theme Switch Component Variables
// These control the appearance and behavior of the theme toggle switch
$track-padding: 2px;  // Space between thumb and track edge
$spacing-ratio: 0.15; // Determines spacing relative to track height
$transition-timing: base.$transition-timing;
$transition-duration: 0.3s;  // Duration for smooth theme transitions

// Root CSS variables for theme switch dimensions
// These variables are used as a base for responsive sizing
:root {
  // Large size (default) configuration
  --track-width: 50px;      // Width of the switch track
  --track-height: 26px;     // Height of the switch track
  --thumb-size: 22px;       // Size of the circular thumb
  --track-padding: #{$track-padding};
  --track-inner-space: calc(var(--track-width) - var(--thumb-size) - (2 * var(--track-padding)));
  --spacing: calc(var(--track-height) * #{$spacing-ratio});
}

// Responsive size configurations for different screen sizes
// Each size (lg, md, sm, xs) has its own dimensions
$screens: (
  lg: (width: 50px, height: 26px, thumb: 22px),
  md: (width: 44px, height: 24px, thumb: 20px),
  sm: (width: 40px, height: 22px, thumb: 18px),
  xs: (width: 34px, height: 18px, thumb: 14px)
);

// Generate variables for each screen size
@each $size, $dims in $screens {
  $track-width: map.get($dims, width);
  $track-height: map.get($dims, height);
  $thumb-size: map.get($dims, thumb);
  $track-inner-space: $track-width - $thumb-size - (2 * $track-padding);
  $spacing: $track-height * $spacing-ratio;

  #{$size} {
    --track-width: #{$track-width};
    --track-height: #{$track-height};
    --thumb-size: #{$thumb-size};
    --track-inner-space: #{$track-inner-space};
    --spacing: #{$spacing};
  }
}

// Theme switcher variables
$switch-light-width: 0%;
$switch-dark-width: 100%;
$gradient-circle-radius: 60%;
$gradient-edge-offset: 1px;
$gradient-light-color: currentColor;
$gradient-dark-color: transparent;
$gradient-blend-mode: difference;

// Main theme switch component styles
.theme-switch {
  // Base styles for the theme switch component
  position: relative;
  width: var(--track-width);
  height: var(--track-height);
  border-radius: calc(var(--track-height) / 2);
  position: fixed;
  z-index: var(--z-index-theme-switch);
  cursor: pointer;
  overflow: hidden;
  background: transparent;
  mix-blend-mode: $gradient-blend-mode;
  transition: all $transition-duration $transition-timing;
  box-shadow: 
    inset 0 0 2px rgba(0, 0, 0, 0.2),
    0 2px 4px rgba(0, 0, 0, 0.1);
  left: 1.5rem;
  top: 1.5rem;

  // Mixin for switch sizes
  @mixin switch-sizes {
    width: var(--track-width);
    height: var(--track-height);
    border-radius: calc(var(--track-height) / 2);

    &::before, &::after {
      height: var(--track-height);
    }

    .switch {
      width: var(--thumb-size);
      height: var(--thumb-size);
      transform: translateY(-50%);
      left: var(--track-padding);
      transition: 
        transform $transition-duration $transition-timing,
        left $transition-duration $transition-timing,
        box-shadow 0.3s ease;
      
      &.light-theme, .light-theme & {
        left: calc(var(--track-width) - var(--thumb-size) - var(--track-padding));
      }
    }
  }

  @include switch-sizes;

  &::before, &::after {
    content: "";
    position: absolute;
    top: 0;
    aspect-ratio: 1;
    transition: width $transition-duration $transition-timing;
  }
  
  // Left portion of the switch background (light side)
  // Creates a circular gradient that transitions from light to dark
  &::before {
    left: 0;
    width: $switch-light-width;  // Larger portion for visual balance
    // Radial gradient creates a circular light-to-dark transition:
    // - Circle originates from bottom-right corner (100% 100%)
    // - Light color fills the inner radius
    // - Sharp cutoff to dark color just after radius for crisp edge
    background: radial-gradient(
      circle at 100% 100%,
      $gradient-light-color $gradient-circle-radius,
      $gradient-dark-color calc(#{$gradient-circle-radius} + #{$gradient-edge-offset})
    );
  }
  
  // Right portion of the switch background (dark side)
  // Creates a complementary circular gradient opposite to the light side
  &::after {
    right: 0;
    width: $switch-dark-width;  // Smaller portion for visual balance
    // Radial gradient creates a circular dark-to-light transition:
    // - Circle originates from top-left corner (0% 0%)
    // - Dark color fills the inner radius
    // - Sharp cutoff to light color just after radius for crisp edge
    background: radial-gradient(
      circle at 0% 0%,
      $gradient-dark-color $gradient-circle-radius,
      $gradient-light-color calc(#{$gradient-circle-radius} + #{$gradient-edge-offset})
    );
  }
  
  &.light-theme {
    &::before { width: $switch-dark-width; }
    &::after { width: $switch-light-width; }
  }
  
  .switch {
    position: absolute;
    left: var(--track-padding);
    width: var(--thumb-size);
    height: var(--thumb-size);
    border-radius: 50%;
    background: var(--color-light);
    transition: all $transition-duration $transition-timing;
    
    // Light theme specific styles
    .light-theme & {
      --switch-color: var(--color-light);
      background: var(--color-light);
      box-shadow: inset -4px -4px 8px rgba(0, 0, 0, 0.2),
                  0 0 10px rgba(255, 255, 255, 0.8);
    }
    
    // Dark theme specific styles
    .dark-theme & {
      --switch-color: var(--color-dark);
      background: var(--color-dark);
      box-shadow: inset 4px 4px 8px rgba(255, 255, 255, 0.2),
                  0 0 10px rgba(0, 0, 0, 0.5);
    }
    
    &::before, &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      transition: all $transition-duration $transition-timing;
      will-change: transform;
    }

    &::before {
      background-image: url(https://images.vexels.com/media/users/3/137782/isolated/preview/5317233afd8c42be610172dc89c5dd18-realistic-moon-by-vexels.png);
      background-size: 115%;  // Increased size for better coverage
      background-position: 60% 50%;  // Centered more horizontally and vertically
      background-repeat: no-repeat;
      transform: rotate(-10deg);  // Reduced rotation for better alignment
      filter: contrast(1.1) brightness(1.05);  // Enhanced contrast for better visibility
    }

    &::after {
      background: hsla(202, 19%, 17%, 0.95);
      transform: translateX(-100%);
    }
  }

  &.light-theme .switch::after {
    transform: translateX(0);
    background: hsla(202, 19%, 17%, 0.7);
  }

  // Mixin for hover and active states
  @mixin hover-active-states {
    &:hover {
      box-shadow: 
        inset 0 0 2px rgba(0, 0, 0, 0.2),
        0 6px 12px rgba(0, 0, 0, 0.2);
      transform: translateY(-2px) scale(1.05);

      .switch {
        box-shadow: 
          0 6px 12px rgba(0, 0, 0, 0.2),
          0 0 2px rgba(0, 0, 0, 0.2);

        &::before {
          transform: rotate(-10deg) scale(1.1);
        }
      }
    }

    &:active {
      transform: translateY(0) scale(0.98);
      box-shadow: 
        inset 0 0 2px rgba(0, 0, 0, 0.2),
        0 2px 4px rgba(0, 0, 0, 0.1);

      .switch {
        box-shadow: 
          0 2px 4px rgba(0, 0, 0, 0.1),
          0 0 1px rgba(0, 0, 0, 0.2);
          
        &::before {
          transform: rotate(-10deg) scale(0.95);
        }
      }
    }
  }

  @include hover-active-states;

  // Responsive styles for different screen sizes
  @include respond(medium) {
    --track-width: 44px;
    --track-height: 24px;
    --thumb-size: 20px;
    left: 1.8rem;
    top: 1.6rem;
  }

  @include respond(small) {
    --track-width: 40px;
    --track-height: 22px;
    --thumb-size: 18px;
    left: 1.5rem;
    top: 1.4rem;
  }

  @include respond(smallest) {
    --track-width: 34px;
    --track-height: 18px;
    --thumb-size: 14px;
    left: 1.2rem;
    top: 1.2rem;
  }
}

// Mixin for theme-specific styles
// Parameters:
// $theme - 'light' or 'dark'
// $bg-color - Background color for the theme
// $text-color - Main text color
// $shadow-color - Color used for shadows and depth
// $vignette-color - Color for vignette effect
// $vignette-blend-mode - Blend mode for vignette effect
@mixin theme-styles($theme, $bg-color, $text-color, $shadow-color, $vignette-color, $vignette-blend-mode) {
  --background-color: #{$bg-color};
  --text-color: #{$text-color};
  --text-color-muted: #{if($theme == 'light', var(--color-grey-dark-2), var(--color-grey-light-2))};
  --shadow-dark: #{if($theme == 'light', var(--shadow-light), var(--shadow-dark))};
  --profile-pic-bg-color: #{if($theme == 'light', var(--lightground-alt), var(--color-grey-dark-3))};
  --vignette-color: #{$vignette-color};
  --vignette-color-dark: #{color.adjust($vignette-color, $alpha: 0.4)};
  --vignette-blend-mode: #{$vignette-blend-mode};
  --vignette-opacity: #{if($theme == 'light', 0.8, 0.6)};
  
  --color-primary: #{if($theme == 'light', var(--color-sage), var(--color-sage-light))};
  --color-secondary: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  --color-accent: #{if($theme == 'light', var(--color-indigo), var(--color-indigo-light))};
  --color-hover: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  
  --component-bg: #{if($theme == 'light', var(--overlay-light), var(--overlay-dark))};
  --component-border: #{if($theme == 'light', var(--shadow-light), var(--shadow-dark))};
  
  &::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      #{color.adjust($shadow-color, $alpha: 0.02)} 0%,
      #{color.adjust($shadow-color, $alpha: 0.05)} 100%
    );
    pointer-events: none;
    z-index: -1;
  }

  @if $theme == 'light' {
    a, button {
      &:hover {
        color: var(--color-hover);
      }
    }

    .work__item,
    .project__item,
    .about__container {
      background-color: var(--lightground-alt);
      box-shadow: 0 2px 8px var(--shadow-light);
    }
  }
}

// Light theme specific styles
// Applies a light color scheme with appropriate shadows and overlays
body.light-theme {
  @include theme-styles('light', var(--color-grey-light-1), var(--color-grey-dark-1), rgb(255, 255, 255), rgba(255, 255, 255, 0.3), soft-light);
  
  --navbar-bg-gradient: linear-gradient(
    to bottom,
    rgba(255, 255, 255, 0.3) 0%,
    transparent 100%
  );

  .theme-switch {
    background: rgba(0, 0, 0, 0.15);
  }
}

// Dark theme specific styles
// Applies a dark color scheme with appropriate shadows and overlays
.dark-theme {
  @include theme-styles('dark', var(--darkground-color), var(--color-grey-light-1), rgb(0, 0, 0), rgba(0, 0, 0, 0.3), screen);
}

// Global body transitions
// Ensures smooth transitions between theme changes
body {
  transition: 
    background-color 0.3s ease,
    color 0.3s ease;
}

// Animation for visual feedback
// Used for interactive elements that need attention
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 0.5;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.2;
  }
}
