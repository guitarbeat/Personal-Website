////////////////////////////////////
// TYPOGRAPHY FUNCTIONS AND MIXINS
////////////////////////////////////

@use "sass:list";
@use "sass:map";
@use "sass:color";
@use "sass:math";
// Remove variables import
// @use "variables" as *;
@use "./breakpoints" as bp;
@use "tokens" as tokens;
@use "./theme/theme-switch" as theme-vars;

// Get a value from the type scale
@function type-scale($size) {
  @return map.get(tokens.$type-scale, $size);
}

// Get a semantic type size
@function semantic-type($size) {
  @return map.get(tokens.$semantic-type-scale, $size);
}

// Get a heading style property
@function heading-style($level, $property) {
  @return map.get(map.get(tokens.$heading-styles, $level), $property);
}

// Get a text style property
@function text-style($style, $property) {
  @return map.get(map.get(tokens.$text-styles, $style), $property);
}

// Get a fluid typography value
@function fluid-type($style, $property) {
  @return map.get(map.get(tokens.$fluid-typography, $style), $property);
}

// Get a responsive typography value
@function responsive-type($style, $breakpoint) {
  @return map.get(map.get(tokens.$responsive-typography, $style), $breakpoint);
}

// Get a vertical rhythm value
@function vertical-rhythm($size) {
  @return map.get(tokens.$vertical-rhythm, $size);
}

// Get a line height value
@function line-height($height) {
  @return map.get(tokens.$line-heights, $height);
}

// Apply heading styles
@mixin heading($level) {
  font-size: heading-style($level, 'font-size');
  font-weight: heading-style($level, 'font-weight');
  line-height: heading-style($level, 'line-height');
  letter-spacing: heading-style($level, 'letter-spacing');
  margin-top: heading-style($level, 'margin-top');
  margin-bottom: heading-style($level, 'margin-bottom');
}

// Legacy heading mixin (for backward compatibility)
@mixin legacy-heading($size, $transform: none) {
  font-size: $size;
  text-transform: $transform;
  color: var(--text);
  transition: transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
}

// Apply text styles
@mixin text($style) {
  font-size: text-style($style, 'font-size');
  font-weight: text-style($style, 'font-weight');
  line-height: text-style($style, 'line-height');
  letter-spacing: text-style($style, 'letter-spacing');
  
  @if map.has-key(map.get(tokens.$text-styles, $style), 'margin-bottom') {
    margin-bottom: text-style($style, 'margin-bottom');
  }
  
  @if map.has-key(map.get(tokens.$text-styles, $style), 'text-transform') {
    text-transform: text-style($style, 'text-transform');
  }
}

// Apply fluid typography
@mixin fluid-type($style) {
  font-size: clamp(
    fluid-type($style, 'min'),
    calc(1rem + 2vw),
    fluid-type($style, 'max')
  );
}

// Apply responsive typography
@mixin responsive-type($style) {
  font-size: responsive-type($style, 'mobile');
  
  @include bp.respond('tablet') {
    font-size: responsive-type($style, 'tablet');
  }
  
  @include bp.respond('desktop') {
    font-size: responsive-type($style, 'desktop');
  }
}

// Apply font family
@mixin font-family($family) {
  font-family: map.get(tokens.$font-families, $family);
}

// Apply font weight
@mixin font-weight($weight) {
  font-weight: map.get(tokens.$font-weights, $weight);
}

// Apply line height
@mixin line-height($height) {
  line-height: map.get(tokens.$line-heights, $height);
}

// Apply vertical rhythm
@mixin vertical-rhythm($size: 'base') {
  margin-bottom: vertical-rhythm($size);
}

////////////////////////////////////
// LEGACY TYPOGRAPHY STYLES
////////////////////////////////////

// Typography Configuration
$typography: (
  'headings': (
    'h1': (
      'size': 3rem,
      'transform': uppercase,
      'spacing': 3rem
    ),
    'h2': (
      'size': 1.6rem,
      'spacing': 0.5rem
    )
  ),
  'animations': (
    'timing': (
      'fast': 0.4s,
      'normal': 0.5s
    ),
    'easing': cubic-bezier(0.34, 1.56, 0.64, 1)
  ),
  'decorations': (
    'underline': (
      'height': 2px,
      'offset': -0.01rem
    ),
    'dot': (
      'size': 0.5rem,
      'offset': -1rem
    )
  )
);

// Base Custom Properties
:root {
  --heading-transition-timing: #{map.get($typography, 'animations', 'timing', 'normal')};
  --heading-transition-easing: #{map.get($typography, 'animations', 'easing')};
  --heading-decoration-gradient: linear-gradient(
    90deg,
    var(--color-sage-light),
    var(--color-coral-light)
  );
}

// Heading Styles
h1 {
  @include heading('h1');

  position: relative;
  transition: transform var(--heading-transition-timing) var(--heading-transition-easing);
  transform-origin: left center;
  will-change: transform;

  &:hover {
    transform: scale(1.01);
    
    &::after {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  &::after {
    content: '';
    position: absolute;
    bottom: map.get($typography, 'decorations', 'underline', 'offset');
    left: 0;
    width: 100%;
    height: map.get($typography, 'decorations', 'underline', 'height');
    background: var(--heading-decoration-gradient);
    transform: scaleX(0);
    opacity: 0;
    transition: 
      transform var(--heading-transition-timing) var(--heading-transition-easing),
      opacity var(--heading-transition-timing) var(--heading-transition-easing);
    transform-origin: left center;
    will-change: transform, opacity;
  }
}

h2 {
  @include heading('h2');

  position: relative;
  transition: 
    transform map.get($typography, 'animations', 'timing', 'fast') var(--heading-transition-easing),
    color map.get($typography, 'animations', 'timing', 'fast') var(--heading-transition-easing);
  transform-origin: left center;
  will-change: transform, color;

  &:hover {
    transform: scale(1.01);
    color: var(--color-sage-light);
    
    &::before {
      transform: scaleX(1);
      opacity: 0.8;
    }
  }
} 