@use "sass:math";
@use "sass:list";
@use "sass:map";

@use "../../../sass/tokens" as tokens;
@use "../../../sass/mixins" as mix;
@use "../../../sass/breakpoints" as bp;

// Restore local component tokens to maintain the avatar styling
// While we transition to the centralized token system, we'll keep this local definition
$header-tokens: (
  'title': (
    'font-size': 5rem,
    'font-size-medium': 4rem,
    'font-size-small': 2.8rem,
    'font-size-smallest': 2.4rem
  ),
  'subtitle': (
    'font-size': 2rem,
    'font-size-medium': 3rem,
    'font-size-small': 1.8rem,
    'font-size-smallest': 1.6rem
  ),
  'tertiary': (
    'font-size': 1.8rem,
    'font-size-medium': 1.8rem,
    'font-size-small': 1.6rem,
    'font-size-smallest': 1.4rem
  ),
  'avatar': (
    'size': 25rem,
    'border-thickness': 5%
  )
);

.header {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;

  &__text {
    margin-left: 3rem;

    h1,
    h2,
    h3 {
      line-height: normal;
      display: inline;
      transition: color 0.5s;
      margin-right: 0.3em;
    }

    h1 {
      // Use local token map with fallback to centralized tokens
      font-size: map.get(map.get($header-tokens, 'title'), 'font-size');
      text-transform: uppercase;

      &:hover {
        color: var(--header-hover);
      }
    }

    h2 {
      // Use local token map with fallback to centralized tokens
      font-size: map.get(map.get($header-tokens, 'subtitle'), 'font-size');
      margin-bottom: 0.4em;
      text-transform: none;

      &:hover {
        color: var(--header-hover);
      }
    }

    h3 {
      // Use local token map with fallback to centralized tokens
      font-size: map.get(map.get($header-tokens, 'tertiary'), 'font-size');
      text-transform: none;

      &:hover {
        color: var(--header-tertiary);
      }
    }
  }

  &__image-container {
    margin: 1rem;
    flex-shrink: 2;
    // Use local token map
    max-width: map.get(map.get($header-tokens, 'avatar'), 'size');
    position: relative;
    width: map.get(map.get($header-tokens, 'avatar'), 'size');
    height: map.get(map.get($header-tokens, 'avatar'), 'size');

    button {
      background: none;
      border: none;
      padding: 0;
      cursor: pointer;
      width: 100%;
      height: 100%;
      position: relative;
      display: block;

      img {
        position: absolute;
        top: 0;
        left: 0;
        transition: opacity 0.5s ease;
        width: 100%;
        height: 100%;
        opacity: 0;
        object-fit: cover;
        border-radius: 50%;
        pointer-events: none;
        will-change: opacity;

        @extend .avatar;

        &.active {
          opacity: 1;
          pointer-events: auto;
        }
      }
    }
  }

  @include bp.down('medium') {
    flex-direction: column;

    &__text {
      text-align: center;
      margin-left: 0;
      margin-top: 3rem;

      h1 {
        // Use local token map
        font-size: map.get(map.get($header-tokens, 'title'), 'font-size-medium');
      }

      h2 {
        // Use local token map
        font-size: map.get(map.get($header-tokens, 'subtitle'), 'font-size-medium');
        line-height: 1.1em;
      }

      h3 {
        // Use local token map
        font-size: map.get(map.get($header-tokens, 'tertiary'), 'font-size-medium');
        line-height: 1em;
      }
    }
  }

  @include bp.down('small') {
    h1 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'title'), 'font-size-small');
    }

    h2 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'subtitle'), 'font-size-small');
      line-height: 1.2em;
    }

    h3 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'tertiary'), 'font-size-small');
      line-height: 1.1em;
    }
  }

  @include bp.down('smallest') {
    h1 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'title'), 'font-size-smallest');
    }

    h2 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'subtitle'), 'font-size-smallest');
      line-height: 1.2em;
    }

    h3 {
      // Use local token map
      font-size: map.get(map.get($header-tokens, 'tertiary'), 'font-size-smallest');
      line-height: 1.1em;
    }
  }
}

.social {
  margin-top: 1rem;

  &__icon {
    height: 4rem;
    width: 4rem;
    color: var(--text);
    padding: 0.7rem;
    display: inline;

    &:hover {
      color: var(--header-hover);
    }

    button {
      color: inherit;
      text-decoration: none;
      background: none;
      border: none;
      padding: 0;

      i {
        color: inherit;
        font-size: 2.5em;
        transition: color 0.5s;

        &:hover {
          color: var(--border-color-sand-dark);
        }
      }
    }
  }
}

.avatar {
  --image-size: 100%;
  --init-scale: 1;
  // Use direct access to local token map for border thickness
  --border-thickness: #{map.get(map.get($header-tokens, 'avatar'), 'border-thickness')};
  --border-color: var(--profile-pic-bg-color);

  width: var(--image-size);

  --mask-gradient: 50% / calc(100% / var(--init-scale)) 100% no-repeat
    content-box;
  --outline-offset-calculated: calc(
    (var(--init-scale) - 1) * var(--image-size) / 2 - var(--border-thickness)
  );

  outline: var(--border-thickness) solid var(--border-color);
  outline-offset: var(--outline-offset-calculated);
  background: radial-gradient(
      circle closest-side,
      var(--border-color) calc(99% - var(--border-thickness)),
      var(--border-color) calc(100% - var(--border-thickness)) 99%,
      transparent
    )
    var(--mask-gradient);
  mask:
    linear-gradient(#000 0 0) no-repeat 50%
      calc(1px - var(--outline-offset-calculated)) / calc(100% / var(--init-scale) - 2 * var(--border-thickness) - 2px) 50%,
    radial-gradient(circle closest-side, #000 100%, transparent) var(--mask-gradient);
  transform: scale(var(--init-scale));
  transition: 0.5s;

  &:hover {
    --init-scale: 1.25;
  }
}

.letter {
  display: inline-block;
  transition: transform 0.2s ease-in-out;
  transform: translate(var(--x, 0), var(--y, 0)) rotate(var(--r, 0))
    scale(var(--image-size, 1));
}

h1,
h2,
h3 {
  &:hover {
    .letter {
      z-index: 2;
      text-shadow: var(--text-shadow);

      --image-size: 1.15;
    }
  }
}

// Using the responsive utility mixins instead of direct media queries
@include bp.down('medium') {
  .social__icon i {
    font-size: 2em;
  }
}

@include bp.down('small') {
  .social__icon i {
    font-size: 1.8em;
  }
}

@include bp.down('smallest') {
  .social__icon i {
    font-size: 1.6em;
  }
}
