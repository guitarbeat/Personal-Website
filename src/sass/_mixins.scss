@use "sass:list";
@use "sass:map";
@use "sass:color";
@use "sass:math";
@use "./breakpoints" as bp;
@use "tokens" as tokens;

// ==========================================================================
// Grid System
// ==========================================================================
@mixin grid($columns: 12, $gap: 2rem) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin grid-column($span: 1, $start: auto) {
  grid-column: $start / span $span;
}

// ==========================================================================
// Media Queries
// ==========================================================================
@mixin respond($breakpoint) {
  @if map.has-key(tokens.$breakpoints, $breakpoint) {
    @media only screen and (max-width: map.get(tokens.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}. Available breakpoints are: #{map.keys(tokens.$breakpoints)}";
  }
}

// Breakpoint mixin for consistent media query usage
@mixin breakpoint($size) {
  @if map.has-key(tokens.$breakpoints, $size) {
    @media only screen and (max-width: map.get(tokens.$breakpoints, $size)) {
      @content;
    }
  } @else {
    @error 'Invalid breakpoint size. Use: #{map.keys(tokens.$breakpoints)}';
  }
}

// ==========================================================================
// Layout
// ==========================================================================
@mixin container($max-width: 120rem) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 2rem;

  @include respond("tablet") {
    padding: 0 1.5rem;
  }
}

@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;

  &::before {
    content: "";
    display: block;
    padding-top: math.div($height, $width) * 100%;
  }
}

// ==========================================================================
// Flexbox
// ==========================================================================
@mixin flex(
  $direction: row,
  $justify: flex-start,
  $align: stretch,
  $wrap: nowrap
) {
  display: flex;
  flex-flow: $direction $wrap;
  justify-content: $justify;
  align-items: $align;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-column($justify: flex-start, $align: stretch) {
  @include flex(column, $justify, $align);
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

// ==========================================================================
// Positioning
// ==========================================================================
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-top {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}

@mixin overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// ==========================================================================
// Typography
// ==========================================================================
@mixin heading($size, $weight: bold, $line-height: 1.2, $transform: none) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
  text-transform: $transform;
  color: var(--text-color);
  transition: transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');

  &:hover {
    transform: scale(1.02);
  }
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizelegibility;
}

// ==========================================================================
// Animations
// ==========================================================================
@mixin smooth-transition($properties...) {
  $transitions: ();

  @each $prop in $properties {
    $transitions: list.append(
      $transitions,
      $prop map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
      comma
    );
  }

  transition: $transitions;
}

@mixin hover-scale($scale: 1.05) {
  transition: transform 0.3s ease;

  &:hover {
    transform: scale($scale);
  }
}

@mixin fade-in($duration: 0.3s, $delay: 0s) {
  opacity: 0;
  animation: fadeIn $duration ease-in forwards;
  animation-delay: $delay;
}

@mixin theme-transition {
  transition:
    background-color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
    color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
    border-color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
    box-shadow map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
}

// ==========================================================================
// Interactive Elements
// ==========================================================================
@mixin clickable {
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
}

@mixin focus-outline($color: var(--color-primary)) {
  &:focus-visible {
    outline: 2px solid $color;
    outline-offset: 2px;
  }
}

@mixin button-reset {
  border: none;
  background: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
}

// ==========================================================================
// Utilities
// ==========================================================================
@mixin hide-scrollbar {
  -ms-overflow-style: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

@mixin glass-effect($blur: 8px, $opacity: 0.1) {
  background-color: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border-radius: 4px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
  
  &:hover {
    background-color: rgba(255, 255, 255, $opacity + 0.05);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.15);
  }
}

@mixin glass-morphism($blur: 10px, $bg-opacity: 0.1) {
  backdrop-filter: blur($blur);
  background-color: rgba(255, 255, 255, $bg-opacity);
  border: 1px solid rgb(255 255 255 / 10%);
}

@mixin debug($color: red) {
  outline: 1px solid $color;
}

// Color Inversion Border Mixin
@mixin invert-border($width: 1px, $style: solid) {
  position: relative;
  
  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: $width $style;
    border-color: var(--text-color);
    mix-blend-mode: difference;
    pointer-events: none;
    z-index: 1;
  }
}

// Card Typography Standard for consistent sizing across the site
@mixin card-typography {
  // Card Title
  h2, .card-title {
    font-size: tokens.font-size('lg'); // 1.25rem (20px)
    font-weight: tokens.font-weight('semibold');
    margin-bottom: tokens.spacing('sm');
  }
  
  h3, .card-subtitle {
    font-size: tokens.font-size('md'); // 1rem (16px)
    font-weight: tokens.font-weight('medium');
    margin-bottom: tokens.spacing('xs');
  }
  
  // Card Description
  p, .card-text {
    font-size: tokens.font-size('md'); // 1rem (16px)
    line-height: 1.5;
  }
  
  // Card Metadata
  .metadata, .card-info, .card-meta {
    font-size: tokens.font-size('sm'); // 0.8rem (13px)
    color: var(--color-text-light);
  }
  
  // Responsive adjustments
  @include respond('small') {
    h2, .card-title {
      font-size: tokens.font-size('md'); // 1rem (16px)
    }
    
    h3, .card-subtitle {
      font-size: tokens.font-size('sm'); // 0.8rem (13px)
    }
    
    p, .card-text {
      font-size: tokens.font-size('sm'); // 0.8rem (13px)
    }
  }
}

// Standard Card Component
@mixin card-container {
  @include glass-effect(12px, 0.15);
  @include clickable;
  @include card-typography;
  
  & {
    padding: tokens.spacing('lg');
    border-radius: tokens.radius('md');
    transition: all tokens.transition-duration('normal') tokens.transition-timing('default');
  }
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }
}

// ==========================================================================
// Shadows
// ==========================================================================
@mixin shadow-light {
  box-shadow: tokens.shadow('sm');
}

@mixin shadow-medium {
  box-shadow: tokens.shadow('md');
}

@mixin shadow-heavy {
  box-shadow: tokens.shadow('lg');
}

// ==========================================================================
// Scaling
// ==========================================================================
@mixin scale-hover-small {
  transition: transform 0.2s ease-in-out;
  
  &:hover {
    transform: scale(tokens.scale('sm'));
  }
}

@mixin scale-hover-medium {
  transition: transform 0.2s ease-in-out;
  
  &:hover {
    transform: scale(tokens.scale('md'));
  }
}

@mixin scale-hover-large {
  transition: transform 0.2s ease-in-out;
  
  &:hover {
    transform: scale(tokens.scale('lg'));
  }
}
