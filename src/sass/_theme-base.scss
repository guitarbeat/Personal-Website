@use "base";
@use "mixins" as *;
@use "sass:map";
@use "sass:color";
@use "theme-variables" as *;

// Generate variables for each screen size
@each $size, $dims in $screens {
  $track-width: map.get($dims, width);
  $track-height: map.get($dims, height);
  $thumb-size: map.get($dims, thumb);
  $track-inner-space: $track-width - $thumb-size - (2 * $track-padding);
  $spacing: $track-height * $spacing-ratio;

  #{$size} {
    --track-width: #{$track-width};
    --track-height: #{$track-height};
    --thumb-size: #{$thumb-size};
    --track-inner-space: #{$track-inner-space};
    --spacing: #{$spacing};
  }
}

// Theme styles mixin
@mixin theme-styles($theme, $bg-color, $text-color, $shadow-color-rgb, $vignette-color-rgb, $vignette-blend-mode) {
  --background-color: #{$bg-color};
  --text-color: #{$text-color};
  --text-color-muted: #{if($theme == 'light', var(--color-grey-dark-2), var(--color-grey-light-2))};
  --shadow-color: #{$shadow-color-rgb};
  --profile-pic-bg-color: #{if($theme == 'light', var(--lightground-alt), var(--color-grey-dark-3))};
  --vignette-color: rgba(#{$vignette-color-rgb}, 0.3);
  --vignette-color-dark: rgba(#{$vignette-color-rgb}, 0.7);
  --vignette-blend-mode: #{$vignette-blend-mode};
  --vignette-opacity: #{if($theme == 'light', 0.8, 0.6)};
  
  // Theme-specific colors
  --color-primary: #{if($theme == 'light', var(--color-sage), var(--color-sage-light))};
  --color-secondary: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  --color-accent: #{if($theme == 'light', var(--color-sand), var(--color-sand-light))};
  --color-hover: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  
  // Component styles
  --component-bg: #{if($theme == 'light', var(--overlay-light), var(--overlay-dark))};
  --component-border: #{if($theme == 'light', var(--shadow-light), var(--shadow-dark))};
  
  &::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(var(--shadow-color), 0.02) 0%,
      rgba(var(--shadow-color), 0.05) 100%
    );
    pointer-events: none;
    z-index: var(--z-index-base);
  }
}

// Light theme
body.light-theme {
  @include theme-styles(
    'light',
    var(--color-grey-light-1),
    var(--color-grey-dark-1),
    var(--color-light-rgb),
    var(--color-light-rgb),
    soft-light
  );
  
  --navbar-bg-gradient: linear-gradient(
    to bottom,
    var(--overlay-light) 0%,
    transparent 100%
  );

  .theme-switch {
    background: var(--shadow-medium);
  }
}

// Dark theme
.dark-theme {
  @include theme-styles(
    'dark',
    var(--darkground-color),
    var(--color-grey-light-1),
    var(--color-dark-rgb),
    var(--color-dark-rgb),
    screen
  );
}

// Global transitions
body {
  transition: 
    background-color var(--theme-transition-duration) var(--theme-transition-timing),
    color var(--theme-transition-duration) var(--theme-transition-timing),
    border-color var(--theme-transition-duration) var(--theme-transition-timing),
    box-shadow var(--theme-transition-duration) var(--theme-transition-timing);

  * {
    transition: 
      background-color var(--theme-transition-duration) var(--theme-transition-timing),
      border-color var(--theme-transition-duration) var(--theme-transition-timing),
      box-shadow var(--theme-transition-duration) var(--theme-transition-timing),
      opacity var(--theme-transition-duration) var(--theme-transition-timing);
  }
}

// Animations
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 0.5;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.2;
  }
}
