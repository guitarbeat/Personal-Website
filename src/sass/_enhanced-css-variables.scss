////////////////////////////////////
// ENHANCED CSS CUSTOM PROPERTIES
// Generates runtime CSS variables from enhanced design tokens
////////////////////////////////////

@use "sass:map";
@use "sass:color";
@use "sass:list";
@use "./enhanced-tokens" as tokens;

/**
 * Extract RGB values from a color for use with rgba()
 * @param {Color} $color - The color to extract RGB values from
 * @return {List} A list of RGB values
 */
@function get-rgb-values($color) {
  @return (
    color.channel($color, "red", $space: rgb),
    color.channel($color, "green", $space: rgb),
    color.channel($color, "blue", $space: rgb)
  );
}

/**
 * Generate CSS custom properties for enhanced design tokens
 * This ensures perfect runtime access to the design system
 */
:root {
  ////////////////////////////////////
  // ENHANCED TYPOGRAPHY VARIABLES
  ////////////////////////////////////
  
  // Type scale
  @each $size, $value in tokens.$enhanced-type-scale {
    --type-scale-#{$size}: #{$value};
  }
  
  // Line heights
  @each $height, $value in tokens.$enhanced-line-heights {
    --line-height-#{$height}: #{$value};
  }
  
  // Letter spacing
  @each $spacing, $value in tokens.$enhanced-letter-spacing {
    --letter-spacing-#{$spacing}: #{$value};
  }
  
  // Font weights
  @each $weight, $value in tokens.$enhanced-font-weights {
    --font-weight-#{$weight}: #{$value};
  }
  
  // Heading styles
  @each $level, $styles in tokens.$enhanced-heading-styles {
    @each $property, $value in $styles {
      --heading-#{$level}-#{$property}: #{$value};
    }
  }
  
  // Text styles
  @each $style, $properties in tokens.$enhanced-text-styles {
    @each $property, $value in $properties {
      --text-#{$style}-#{$property}: #{$value};
    }
  }
  
  ////////////////////////////////////
  // ENHANCED COLOR VARIABLES
  ////////////////////////////////////
  
  // Theme colors with RGB values
  @each $palette, $shades in tokens.$enhanced-theme-colors {
    @each $shade, $color in $shades {
      --color-#{$palette}-#{$shade}: #{$color};
      
      // Generate RGB values for each color
      $rgb: get-rgb-values($color);
      --color-#{$palette}-#{$shade}-rgb: #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
    }
  }
  
  // Semantic colors with RGB values
  @each $type, $shades in tokens.$enhanced-semantic-colors {
    @each $shade, $color in $shades {
      --color-#{$type}-#{$shade}: #{$color};
      
      // Generate RGB values for each color
      $rgb: get-rgb-values($color);
      --color-#{$type}-#{$shade}-rgb: #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
    }
  }
  
  // Grayscale with RGB values
  @each $shade, $color in tokens.$enhanced-grayscale {
    --color-gray-#{$shade}: #{$color};
    
    // Generate RGB values for each color
    $rgb: get-rgb-values($color);
    --color-gray-#{$shade}-rgb: #{list.nth($rgb, 1)}, #{list.nth($rgb, 2)}, #{list.nth($rgb, 3)};
  }
  
  // Background colors
  @each $variant, $color in tokens.$enhanced-background-colors {
    --background-#{$variant}: #{$color};
  }
  
  ////////////////////////////////////
  // ENHANCED SPACING VARIABLES
  ////////////////////////////////////
  
  // Spacing scale
  @each $size, $value in tokens.$enhanced-spacing-scale {
    --spacing-#{$size}: #{$value};
  }
  
  // Semantic spacing
  @each $size, $value in tokens.$enhanced-semantic-spacing {
    --spacing-#{$size}: #{$value};
  }
  
  // Component spacing
  @each $component, $properties in tokens.$enhanced-component-spacing {
    @each $property, $value in $properties {
      --#{$component}-#{$property}: #{$value};
    }
  }
  
  ////////////////////////////////////
  // ENHANCED BORDER RADIUS VARIABLES
  ////////////////////////////////////
  
  @each $size, $value in tokens.$enhanced-border-radius {
    --radius-#{$size}: #{$value};
  }
  
  ////////////////////////////////////
  // ENHANCED SHADOW VARIABLES
  ////////////////////////////////////
  
  @each $size, $value in tokens.$enhanced-shadows {
    --shadow-#{$size}: #{$value};
  }
  
  @each $state, $value in tokens.$enhanced-state-shadows {
    --shadow-#{$state}: #{$value};
  }
  
  ////////////////////////////////////
  // ENHANCED TRANSITION VARIABLES
  ////////////////////////////////////
  
  @each $type, $properties in tokens.$enhanced-transitions {
    @each $property, $value in $properties {
      --transition-#{$type}-#{$property}: #{$value};
    }
  }
  
  ////////////////////////////////////
  // ENHANCED Z-INDEX VARIABLES
  ////////////////////////////////////
  
  @each $layer, $value in tokens.$enhanced-z-index {
    --z-#{$layer}: #{$value};
  }
  
  ////////////////////////////////////
  // ENHANCED BREAKPOINT VARIABLES
  ////////////////////////////////////
  
  @each $breakpoint, $value in tokens.$enhanced-breakpoints {
    --breakpoint-#{$breakpoint}: #{$value};
  }
  
  ////////////////////////////////////
  // ENHANCED COMPONENT VARIABLES
  ////////////////////////////////////
  
  // Button standards
  @each $size, $properties in map.get(tokens.$enhanced-button-standards, 'sizes') {
    @each $property, $value in $properties {
      --button-#{$size}-#{$property}: #{$value};
    }
  }
  
  @each $variant, $properties in map.get(tokens.$enhanced-button-standards, 'variants') {
    @each $property, $value in $properties {
      --button-#{$variant}-#{$property}: #{$value};
    }
  }
  
  // Input standards
  @each $size, $properties in map.get(tokens.$enhanced-input-standards, 'sizes') {
    @each $property, $value in $properties {
      --input-#{$size}-#{$property}: #{$value};
    }
  }
  
  @each $state, $properties in map.get(tokens.$enhanced-input-standards, 'states') {
    @each $property, $value in $properties {
      --input-#{$state}-#{$property}: #{$value};
    }
  }
  
  // Icon standards
  @each $size, $value in map.get(tokens.$enhanced-icon-standards, 'sizes') {
    --icon-size-#{$size}: #{$value};
  }
  
  // Card standards
  @each $variant, $properties in map.get(tokens.$enhanced-card-standards, 'variants') {
    @each $property, $value in $properties {
      --card-#{$variant}-#{$property}: #{$value};
    }
  }
  
  @each $property, $value in map.get(tokens.$enhanced-card-standards, 'spacing') {
    --card-#{$property}: #{$value};
  }
  
  ////////////////////////////////////
  // UTILITY VARIABLES
  ////////////////////////////////////
  
  // Common color combinations
  --text-primary: var(--color-gray-900);
  --text-secondary: var(--color-gray-600);
  --text-muted: var(--color-gray-500);
  --text-inverse: var(--color-gray-50);
  
  --border-light: var(--color-gray-200);
  --border-medium: var(--color-gray-300);
  --border-dark: var(--color-gray-400);
  
  --background-primary: var(--background-light);
  --background-secondary: var(--background-light-secondary);
  --background-tertiary: var(--background-light-tertiary);
  
  // Interactive states
  --focus-ring: var(--color-primary-200);
  --focus-ring-error: var(--color-error-200);
  
  // Common spacing combinations
  --section-padding: var(--spacing-6);
  --container-padding: var(--spacing-4);
  --card-padding: var(--spacing-5);
  --button-padding: var(--spacing-4);
  
  // Common border radius
  --radius-default: var(--radius-md);
  --radius-button: var(--radius-sm);
  --radius-input: var(--radius-sm);
  --radius-card: var(--radius-md);
}

////////////////////////////////////
// DARK THEME VARIABLES
////////////////////////////////////

.dark-theme {
  // Dark theme color overrides
  --text-primary: var(--color-gray-50);
  --text-secondary: var(--color-gray-300);
  --text-muted: var(--color-gray-400);
  --text-inverse: var(--color-gray-900);
  
  --border-light: var(--color-gray-700);
  --border-medium: var(--color-gray-600);
  --border-dark: var(--color-gray-500);
  
  --background-primary: var(--background-dark);
  --background-secondary: var(--background-dark-secondary);
  --background-tertiary: var(--background-dark-tertiary);
  
  // Dark theme shadows
  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.3);
  --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.3), 0 1px 2px -1px rgb(0 0 0 / 0.3);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.3), 0 2px 4px -2px rgb(0 0 0 / 0.3);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.3), 0 4px 6px -4px rgb(0 0 0 / 0.3);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.3), 0 8px 10px -6px rgb(0 0 0 / 0.3);
  --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.4);
  
  // Dark theme state shadows
  --shadow-hover: 0 4px 6px -1px rgb(0 0 0 / 0.3), 0 2px 4px -2px rgb(0 0 0 / 0.3);
  --shadow-active: 0 2px 4px -1px rgb(0 0 0 / 0.3);
  --shadow-focus: 0 0 0 3px rgb(59 130 246 / 0.6);
  
  // Dark theme component overrides
  --card-default-background: var(--color-gray-800);
  --card-default-border: var(--color-gray-700);
  --card-elevated-background: var(--color-gray-800);
  --card-outlined-background: transparent;
  --card-outlined-border: var(--color-gray-700);
  
  --input-default-background: var(--color-gray-800);
  --input-default-border: var(--color-gray-600);
  --input-default-color: var(--color-gray-100);
  --input-default-placeholder: var(--color-gray-400);
  
  --input-hover-background: var(--color-gray-800);
  --input-hover-border: var(--color-gray-500);
  --input-hover-color: var(--color-gray-100);
  
  --input-focus-background: var(--color-gray-800);
  --input-focus-border: var(--color-primary-500);
  --input-focus-color: var(--color-gray-100);
  
  --input-error-background: var(--color-gray-800);
  --input-error-border: var(--color-error-500);
  --input-error-color: var(--color-gray-100);
  
  --input-disabled-background: var(--color-gray-900);
  --input-disabled-border: var(--color-gray-700);
  --input-disabled-color: var(--color-gray-500);
}

////////////////////////////////////
// HIGH CONTRAST THEME VARIABLES
////////////////////////////////////

.high-contrast {
  // Enhanced contrast for accessibility
  --text-primary: var(--color-gray-900);
  --text-secondary: var(--color-gray-800);
  --text-muted: var(--color-gray-700);
  
  --border-light: var(--color-gray-800);
  --border-medium: var(--color-gray-900);
  --border-dark: var(--color-black);
  
  --focus-ring: var(--color-primary-900);
  --focus-ring-error: var(--color-error-900);
  
  // Enhanced shadows for better visibility
  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.4);
  --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.4), 0 1px 2px -1px rgb(0 0 0 / 0.4);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.4), 0 2px 4px -2px rgb(0 0 0 / 0.4);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.4), 0 4px 6px -4px rgb(0 0 0 / 0.4);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.4), 0 8px 10px -6px rgb(0 0 0 / 0.4);
  --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.5);
}

////////////////////////////////////
// REDUCED MOTION VARIABLES
////////////////////////////////////

@media (prefers-reduced-motion: reduce) {
  :root {
    --transition-duration-fast: 0s;
    --transition-duration-normal: 0s;
    --transition-duration-slow: 0s;
    --transition-duration-very-slow: 0s;
  }
}

////////////////////////////////////
// PRINT VARIABLES
////////////////////////////////////

@media print {
  :root {
    --shadow-xs: none;
    --shadow-sm: none;
    --shadow-md: none;
    --shadow-lg: none;
    --shadow-xl: none;
    --shadow-2xl: none;
    
    --background-primary: white;
    --background-secondary: white;
    --background-tertiary: white;
    
    --color-primary-500: black;
    --color-primary-600: black;
    --color-primary-700: black;
  }
}