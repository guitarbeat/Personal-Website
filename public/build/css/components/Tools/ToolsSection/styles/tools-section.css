/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Get a component token safely with fallback
 * @param {String} $component - Component name
 * @param {String} $category - Category within component
 * @param {String} $token - Token name
 * @param {*} $fallback - Fallback value if token doesn't exist
 * @return {*} Token value or fallback
 */
/**
 * Get a theme color safely with fallback
 * @param {String} $name - Color name
 * @param {String} $variant - Color variant (base, light, dark, alt)
 * @param {*} $fallback - Fallback value if color doesn't exist
 * @return {*} Color value or fallback
 */
/**
 * Get a spacing value safely with fallback
 * @param {String} $size - Spacing size
 * @param {*} $fallback - Fallback value if spacing doesn't exist
 * @return {*} Spacing value or fallback
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
.section {
  padding: 4rem 0;
  position: relative;
  min-height: 100vh;
  overflow: hidden;
}

.section-title-container {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
}

.section-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: var(--color-text);
  text-transform: uppercase;
  position: relative;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform-origin: center;
  will-change: transform;
}
.section-title:hover {
  transform: scale(1.02);
}
.section-title:hover::after {
  transform: scaleX(1);
  opacity: 1;
}
.section-title::after {
  content: "";
  position: absolute;
  bottom: -0.01rem;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--heading-decoration-gradient);
  transform: scaleX(0);
  opacity: 0;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform-origin: center;
  will-change: transform, opacity;
}

.section-subtitle {
  font-size: 1.6rem;
  color: var(--color-text-light);
  max-width: 600px;
  margin: 0 auto;
  position: relative;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform-origin: center;
  will-change: transform, color;
}
.section-subtitle:hover {
  transform: scale(1.02);
  color: var(--color-sage-light);
}

.tool-card {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  padding: 1.5rem;
  backdrop-filter: blur(var(--about-blur-amount));
  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--about-border-radius);
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  height: 100%;
}
@media (prefers-color-scheme: light) {
  .tool-card {
    background: rgba(255, 255, 255, 0.8);
    border-color: rgba(0, 0, 0, 0.1);
  }
  .tool-card .tool-title {
    color: var(--color-grey-dark-1);
  }
  .tool-card .tool-description {
    color: var(--color-grey-dark-2);
  }
}
.tool-card:hover {
  background: var(--color-card-hover-bg, rgba(255, 255, 255, 0.05));
  transform: scale(1.02);
}
.tool-card.selected {
  background: linear-gradient(135deg, rgba(var(--color-sage-rgb), 0.15), rgba(var(--color-coral-rgb), 0.15));
  backdrop-filter: blur(calc(var(--about-blur-amount) * 1.5));
  border-color: rgba(var(--color-sage-rgb), 0.3);
  box-shadow: var(--about-glass-shadow), 0 0 20px rgba(var(--color-sage-rgb), 0.2);
}
@media (prefers-color-scheme: light) {
  .tool-card.selected {
    background: linear-gradient(135deg, rgba(var(--color-sage-rgb), 0.3), rgba(var(--color-coral-rgb), 0.3));
    border-color: rgba(var(--color-sage-rgb), 0.5);
  }
}
.tool-card:active {
  transform: scale(0.98);
}

.tool-icon {
  font-size: 2rem;
  margin-bottom: 1rem;
  color: var(--color-sage);
  transition: color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.tool-card:hover .tool-icon {
  color: var(--color-coral-light);
}
@media (prefers-color-scheme: light) {
  .tool-icon {
    color: var(--color-sage-dark);
  }
  .tool-card:hover .tool-icon {
    color: var(--color-coral);
  }
}

.tool-title {
  margin-bottom: 0.5rem;
  font-size: 1.2rem;
  color: var(--color-text);
  transition: color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.tool-card:hover .tool-title {
  color: var(--color-text-hover);
  transform: scale(1.02);
}

.tool-description {
  font-size: 0.9rem;
  color: var(--color-text-light);
}
@media (prefers-color-scheme: light) {
  .tool-description {
    color: var(--color-grey-dark-2);
  }
}

.tool-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}
@media only screen and (max-width: 50em) {
  .tool-container .tools-section__container {
    padding: 1rem;
  }
}

.tool-content-container {
  width: 100%;
  max-width: 1200px;
  margin: 2rem auto;
  min-height: 400px;
}

.loading-wrapper {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  padding: 2rem;
  text-align: center;
  min-height: 300px;
}
.loading-wrapper i {
  font-size: 2rem;
  animation: rotate 1s linear infinite;
  color: var(--color-sage);
}

.error-container {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  padding: 2rem;
  text-align: center;
  min-height: 300px;
}
.error-container button {
  padding: 0.5rem 1rem;
  background: var(--color-sage);
  color: var(--color-grey-dark-1);
  border: none;
  border-radius: var(--about-border-radius);
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.error-container button:hover {
  background: var(--color-sage-light);
  transform: scale(1.02);
}
.error-container button:active {
  transform: scale(0.98);
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
