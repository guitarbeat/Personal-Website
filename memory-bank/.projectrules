# Project Rules: Personal Website

## Code Style

- Use consistent indentation (2 spaces)
- Follow React component naming conventions (PascalCase for components)
- Use descriptive variable and function names
- Component names should accurately reflect their functionality
- CSS classes should follow kebab-case naming convention
- Use SCSS nesting for related styles
- Prefer functional components with hooks over class components
- Always use block braces for conditional statements, even for single-line returns
- Follow Sourcery linting recommendations for code style consistency
- Address ESLint warnings promptly to maintain code quality
- Avoid duplicate components across files to prevent maintenance issues
- Eliminate code duplication, especially in SASS variables

## Workflow Preferences

- Component files should be organized by feature/functionality
- SCSS files should mirror the component structure
- Use React.memo for performance optimization where appropriate
- Implement responsive design for all components
- Use localStorage for client-side data persistence
- Routes should match component names using kebab-case
- Address linting warnings promptly to maintain code quality
- Make variable usage explicit to avoid linter confusion
- Consolidate duplicate variables to a single source of truth

## Implementation Patterns

- **Component Renaming**: When renaming components, ensure all references are updated:
  - Component file name
  - Import statements
  - Route paths
  - CSS class names
  - localStorage keys
  - Any text references in UI
- **Tool Components**: Interactive tools should:
  - Be self-contained with their own state management
  - Have responsive designs that work on all devices
  - Include clear instructions for users
  - Save progress where appropriate (using localStorage)
  - Have intuitive UI that matches their purpose
- **Code Style Consistency**: Maintain consistent code style by:
  - Following established patterns in the codebase
  - Using linting tools to identify inconsistencies
  - Fixing style issues as they are found
  - Documenting style decisions in this file
- **Handling ESLint Warnings**:
  - Address ESLint warnings as soon as they appear
  - Prefer fixing the root cause rather than using disable comments
  - For variables that appear unused but are used, make usage more explicit
  - Remove truly unused variables, functions, and components
  - Keep code DRY by avoiding duplication across files
- **SASS Variable Management**:
  - Define variables in a single location (_tokens.scss)
  - Use SASS modules to forward variables to other files
  - Don't duplicate variable definitions
  - Use maps for related variables
  - Follow consistent naming conventions
  - Document variables with clear comments
  - Group related variables together

## Known Challenges

- **Component Naming**: Ensuring component names accurately reflect their purpose
  - Example: Renamed "Meditation" to "ConflictMediation" to better reflect its conflict resolution purpose
- **localStorage Management**: When renaming components that use localStorage:
  - Update all localStorage key references
  - Consider migration strategies for existing user data
  - Clean up old localStorage keys to prevent conflicts
- **Route Changes**: When changing routes:
  - Update all links to the route
  - Consider adding redirects for old routes if possible
- **Code Style Consistency**: Maintaining consistent style across the codebase:
  - Different developers may have different style preferences
  - Legacy code may not follow current style guidelines
  - Automated tools can help identify inconsistencies
- **SASS Variable Duplication**: Eliminating duplicated SASS variables:
  - Variables defined in multiple files
  - Inconsistent naming conventions
  - Legacy variables mixed with modern token system
  - Backward compatibility concerns

## Tool Usage

- **React Router**: Used for client-side routing between different sections and tools
- **React Hooks**: Preferred for state management and side effects
  - useState for local component state
  - useEffect for side effects
  - useCallback for memoized callbacks
  - useRef for persistent values between renders
- **Context API**: Used for global state that needs to be accessed by multiple components
- **SCSS**: Used for styling with nested selectors and variables
  - Component-specific styles should be in their own SCSS files
  - Global styles in main.scss
- **Linting Tools**: Used to maintain code quality and consistency
  - ESLint for JavaScript/React code
  - Stylelint for SCSS/CSS
  - Sourcery for additional code quality suggestions
- **Utility Scripts**: Used to analyze and maintain codebase quality
  - find-unused-sass-vars.js for identifying unused variables
  - list-sass-vars.js for documenting SASS variables

# Project Rules: Personal Website Tools

## Code Style

### SASS/SCSS

- Use modern `@use` syntax instead of `@import`
- Place `@use` statements at the top of the file, before any CSS rules
- Use namespaces for imports (e.g., `@use "variables" as vars;`)
- Use mixins for repeated patterns
- Use CSS custom properties for theme-related values
- Avoid using `transition: all` for performance reasons
- Use will-change property sparingly
- Provide reduced motion alternatives
- Keep component styles properly scoped
- Use the `& {}` wrapper for declarations after nested rules
- Move keyframes to dedicated files
- Ensure proper nesting in media queries
- Don't use `&` selectors in keyframes
- Always use proper namespacing for imports to avoid conflicts
- Define variables only once in a dedicated file
- Forward variables to other files rather than redefining them
- Group related variables in maps
- Use consistent variable naming conventions
- Document variables with clear comments

### JavaScript/TypeScript

- Use functional components with hooks
- Use TypeScript interfaces for props
- Use destructuring for props
- Use meaningful variable names
- Add JSDoc comments for functions
- Use optional chaining and nullish coalescing
- Prefer const over let
- Avoid any type when possible

### React

- Use functional components
- Use React hooks for state and effects
- Keep components focused on a single responsibility
- Use prop-types or TypeScript for type checking
- Use meaningful component names
- Use PascalCase for component names
- Use camelCase for props and variables

## Workflow Preferences

### Development Process

- Use feature branches for new features
- Use pull requests for code review
- Write meaningful commit messages
- Test changes locally before pushing
- Update documentation when making changes
- Run linters before committing

### Tools

- Use VSCode as the primary editor
- Use ESLint for linting
- Use Prettier for formatting
- Use Jest for testing
- Use React Testing Library for component tests

## Implementation Patterns

### SASS Architecture

- Main SASS files in `src/sass/`
- Component-specific styles in component folders
- Use mixins for repeated patterns
- Use variables for consistent values
- Use CSS custom properties for theme values
- Use the `& {}` wrapper for declarations after nested rules
- Move keyframes to dedicated files
- Ensure proper nesting in media queries
- Use proper namespacing for imports (e.g., `@use "base" as base;`)
- Define all variables in _tokens.scss
- Forward variables to modules that need them
- Use maps for related variables
- Document variable groups with comments

### Component Structure

- Component files in `src/components/`
- Each component in its own folder
- Index file for exporting
- Component file for implementation
- Types file for TypeScript interfaces
- Styles folder for SCSS files

### State Management

- Use React Context for global state
- Use useState for component state
- Use useReducer for complex state
- Use localStorage for persistence
- Initialize state from localStorage when available
- Update localStorage when state changes

## Known Challenges

### SASS Integration

- Integrating Tools styles with main SASS architecture
- Standardizing CSS variable usage
- Implementing consistent theme handling
- Refactoring component styles to use shared patterns
- Fixing Sass deprecation warnings
- Eliminating variable duplication
- Addressing unused variables
- Standardizing naming conventions

### Mobile Responsiveness

- Improving EmotionWheel mobile interaction
- Optimizing layouts for small screens
- Adding touch-friendly controls
- Implementing haptic feedback

### Performance

- Implementing code splitting
- Optimizing animations
- Reducing bundle size
- Implementing lazy loading

## Tool Usage

### SASS

- Use `@use` for importing
- Use mixins for repeated patterns
- Use variables for consistent values
- Use CSS custom properties for theme values
- Use the `& {}` wrapper for declarations after nested rules
- Move keyframes to dedicated files
- Ensure proper nesting in media queries
- Use proper namespacing for imports

### React

- Use functional components
- Use hooks for state and effects
- Use TypeScript for type checking
- Use meaningful component names
- Use PascalCase for component names
- Use camelCase for props and variables

### Testing

- Use Jest for unit tests
- Use React Testing Library for component tests
- Write meaningful test descriptions
- Test component behavior, not implementation
- Mock external dependencies

## Sass Deprecation Warnings

The project has addressed several Sass deprecation warnings:

1. **Declarations After Nested Rules**:
   - Problem: Sass's behavior for declarations that appear after nested rules will be changing to match CSS behavior.
   - Solution: Wrap declarations in `& {}` blocks to opt into the new behavior.
   - Example:

     ```scss
     .selector {
       .nested {
         color: blue;
       }
       
       & {
         color: red; // Wrapped in & {} to opt into new behavior
       }
     }
     ```

2. **Keyframe Animations**:
   - Problem: `&` selectors are not allowed in keyframe blocks.
   - Solution: Define keyframes without `&` selectors and move them to dedicated files.
   - Example:

     ```scss
     // Correct
     @keyframes fadeIn {
       0% { opacity: 0; }
       100% { opacity: 1; }
     }
     
     // Incorrect
     @keyframes fadeIn {
       0% { & { opacity: 0; } }
       100% { & { opacity: 1; } }
     }
     ```

3. **Media Queries**:
   - Problem: Declarations in media queries after nested rules need proper nesting.
   - Solution: Ensure proper nesting with `& {}` blocks in media queries.
   - Example:

     ```scss
     @media (max-width: 768px) {
       .selector {
         & {
           padding: 1rem;
         }
       }
     }
     ```

4. **Import Namespacing**:
   - Problem: Imports without namespacing can cause conflicts and make it unclear where variables/mixins come from.
   - Solution: Always use proper namespacing for imports.
   - Example:

     ```scss
     // Correct
     @use "base" as base;
     @use "variables" as vars;
     
     // Incorrect
     @use "base";
     @use "variables";
     ```

## SASS Variable Duplication Guidelines

1. **Single Source of Truth**:
   - Define all design tokens in `_tokens.scss`
   - Use SASS maps to group related variables
   - Add clear comments to document variable purpose

2. **Import and Export Pattern**:
   - Use `@use` for importing modules
   - Use `@forward` for re-exporting variables
   - Always add namespaces to imports
   - Don't redefine variables in multiple files

3. **Naming Conventions**:
   - Use kebab-case for variable names
   - Use descriptive prefixes for related variables
   - Group related variables in maps with clear names
   - Be consistent with naming patterns

4. **Variable Organization**:
   - Group variables by function (colors, spacing, typography)
   - Place related variables together
   - Document variable groups with comments
   - Maintain a logical ordering

5. **Backward Compatibility**:
   - Use forwarding modules for backward compatibility
   - Add deprecation comments for legacy variables
   - Document migration paths in code comments
   - Provide utilities for converting between systems

## Systematic Approach to Fixing Sass Deprecation Warnings

1. **Identify Warnings**:
   - Run the project and check the console for Sass deprecation warnings
   - Note the file and line numbers where warnings occur

2. **Fix Declarations After Nested Rules**:
   - Wrap declarations in `& {}` blocks
   - Keep the nesting structure consistent

3. **Fix Keyframe Animations**:
   - Move keyframes to dedicated files
   - Remove `&` selectors from keyframes
   - Ensure proper import of keyframe files

4. **Fix Media Queries**:
   - Ensure proper nesting with `& {}` blocks in media queries
   - Keep the media query structure consistent

5. **Fix Import Namespacing**:
   - Add proper namespacing to all imports
   - Use meaningful aliases that reflect the imported module

6. **Verify Fixes**:
   - Run the project again to check if warnings are resolved
   - Ensure styles are applied correctly
   - Document the changes in the Memory Bank
