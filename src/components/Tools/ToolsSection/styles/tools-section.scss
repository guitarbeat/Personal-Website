@use "sass:map";
// @use "../../../../sass/variables" as vars; // Removed in favor of tokens
@use "../../../../sass/mixins" as mix;
@use "../../../../sass/functions" as fn;
@use "../../../../sass/breakpoints" as bp;
@use "../../../../sass/tokens" as tokens;

// ToolsSection styles
.section {
  padding: 4rem 0;
  position: relative;
  min-height: 100vh;
  overflow: hidden;
}

.section-title-container {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
}

.section-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: var(--color-text);
  text-transform: uppercase;
  position: relative;
  transition: transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
  transform-origin: center;
  will-change: transform;

  &:hover {
    transform: scale(tokens.scale("sm"));
    
    &::after {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -0.01rem;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--heading-decoration-gradient);
    transform: scaleX(0);
    opacity: 0;
    transition: 
      transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
      opacity map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
    transform-origin: center;
    will-change: transform, opacity;
  }
}

.section-subtitle {
  font-size: 1.6rem;
  color: var(--color-text-light);
  max-width: 600px;
  margin: 0 auto;
  position: relative;
  transition: 
    transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
    color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
  transform-origin: center;
  will-change: transform, color;

  &:hover {
    transform: scale(tokens.scale("sm"));
    color: var(--color-sage-light);
  }
}

// Tool card styles
.tool-card {
  @include mix.flex-column(center, center);
  padding: 1.5rem;
  @include mix.glass-morphism(var(--about-blur-amount), 0.1);
  border-radius: var(--about-border-radius);
  @include mix.clickable;
  transition: transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
  height: 100%;

  // Improve contrast in light mode
  @media (prefers-color-scheme: light) {
    background: rgba(255, 255, 255, 0.8);
    border-color: rgba(0, 0, 0, 0.1);
    
    .tool-title {
      color: var(--color-grey-dark-1);
    }
    
    .tool-description {
      color: var(--color-grey-dark-2);
    }
  }

  &:hover {
    background: var(--color-card-hover-bg, rgba(255, 255, 255, 0.05));
    transform: scale(tokens.scale("sm"));
  }

  &.selected {
    background: linear-gradient(
      135deg,
      rgba(var(--color-sage-rgb), 0.15),
      rgba(var(--color-coral-rgb), 0.15)
    );
    backdrop-filter: blur(calc(var(--about-blur-amount) * 1.5));
    border-color: rgba(var(--color-sage-rgb), 0.3);
    box-shadow: 
      var(--about-glass-shadow),
      0 0 20px rgba(var(--color-sage-rgb), 0.2);
      
    @media (prefers-color-scheme: light) {
      background: linear-gradient(
        135deg,
        rgba(var(--color-sage-rgb), 0.3),
        rgba(var(--color-coral-rgb), 0.3)
      );
      border-color: rgba(var(--color-sage-rgb), 0.5);
    }
  }

  &:active {
    transform: scale(0.98);
  }
}

.tool-icon {
  font-size: 2rem;
  margin-bottom: 1rem;
  color: var(--color-sage);
  transition: color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');

  .tool-card:hover & {
    color: var(--color-coral-light);
  }
  
  @media (prefers-color-scheme: light) {
    color: var(--color-sage-dark);
    
    .tool-card:hover & {
      color: var(--color-coral);
    }
  }
}

.tool-title {
  margin-bottom: 0.5rem;
  font-size: 1.2rem;
  color: var(--color-text);
  transition: color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');

  .tool-card:hover & {
    color: var(--color-text-hover);
    transform: scale(tokens.scale("sm"));
  }
}

.tool-description {
  font-size: 0.9rem;
  color: var(--color-text-light);
  
  @media (prefers-color-scheme: light) {
    color: var(--color-grey-dark-2);
  }
}

// Tool container
.tool-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;

  @include mix.respond('medium') {
    .tools-section {
      &__container {
        padding: 1rem;
      }
    }
  }
}

// Tool content container
.tool-content-container {
  width: 100%;
  max-width: 1200px;
  margin: 2rem auto;
  min-height: 400px;
}

// Loading and error states
.loading-wrapper {
  @include mix.flex-column(center, center);
  gap: 1rem;
  padding: 2rem;
  text-align: center;
  min-height: 300px;

  i {
    font-size: 2rem;
    animation: rotate 1s linear infinite;
    color: var(--color-sage);
  }
}

.error-container {
  @include mix.flex-column(center, center);
  gap: 1rem;
  padding: 2rem;
  text-align: center;
  min-height: 300px;
  
  button {
    padding: 0.5rem 1rem;
    background: var(--color-sage);
    color: var(--color-grey-dark-1);
    border: none;
    border-radius: var(--about-border-radius);
    @include mix.clickable;
    transition: 
      background-color map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default'),
      transform map.get(tokens.$transitions, 'duration', 'normal') map.get(tokens.$transitions, 'timing', 'default');
    
    &:hover {
      background: var(--color-sage-light);
      transform: scale(tokens.scale("sm"));
    }
    
    &:active {
      transform: scale(0.98);
    }
  }
}

// Animations
@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
} 
