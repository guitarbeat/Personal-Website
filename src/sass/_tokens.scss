////////////////////////////////////
// DESIGN TOKENS
////////////////////////////////////

// This file serves as the single source of truth for all design tokens in the project.
// It consolidates variables from _variables.scss, _base.scss, _breakpoints.scss, and other files.

// Import Sass modules
@use "sass:map";
@use "sass:color";
@use "sass:math";

////////////////////////////////////
// COLOR SYSTEM
////////////////////////////////////

// Primary Theme Colors
$theme-colors: (
  'sage': (
    'base': #0b7abd,    // Enhanced blue-tone sage from original #0b5d87
    'light': #1eaae0,   // Brighter blue light from original #1e98c9
    'dark': #085980,    // Richer blue dark from original #084567
    'alt': #0a6d8f      // Vibrant alt blue shade
  ),
  'coral': (
    'base': #e15b18,    // Original coral base with retained vibrancy
    'light': #f47234,   // Original coral light with retained vibrancy
    'dark': #c44b12,    // Original coral dark 
    'alt': #b44410      // Original coral alt
  ),
  'sand': (
    'base': #a8958c,    // Original sand base
    'light': #baa69d,   // Original sand light
    'dark': #968475,    // Original sand dark
    'alt': #8f7a6d      // Original sand alt
  ),
  'indigo': (
    'base': #1a1a1d,    // Original indigo (neutral black) instead of blue
    'light': #2d2d32,   // Original indigo light
    'dark': #121214,    // Original indigo dark
    'alt': #252525      // Neutral dark grey
  )
);

// Grayscale
$grayscale: (
  'white': #fff,
  'gray-100': #f8f9fa,
  'gray-200': #e9ecef,
  'gray-300': #dee2e6,
  'gray-400': #ced4da,
  'gray-500': #adb5bd,
  'gray-600': #6c757d,
  'gray-700': #495057,
  'gray-800': #343a40,
  'gray-900': #212529,
  'black': #000
);

// Semantic Colors
$semantic-colors: (
  'success': #458e6d,  // Original success green
  'warning': #e4aa3d,  // Original warning yellow
  'error': #c64530,    // Original error red
  'info': #0b7abd      // Enhanced blue to match sage base
);

// Background Colors
$background-colors: (
  'light': #f0f0f0,    // Neutral light background (no blue tint)
  'dark': #1a1a1d      // Original neutral dark background (no blue tint)
);

// Overlay Colors
$overlay-colors: (
  'light': rgba(255, 255, 255, 0.8),
  'dark': rgba(0, 0, 0, 0.85)  // Slightly more opaque for better contrast
);

////////////////////////////////////
// SPACING SYSTEM
////////////////////////////////////

// Base spacing scale using a non-linear progression
$spacing-scale: (
  '0': 0,                // 0px
  '1': 0.25rem,          // 4px
  '2': 0.5rem,           // 8px
  '3': 0.75rem,          // 12px
  '4': 1rem,             // 16px
  '5': 1.5rem,           // 24px
  '6': 2rem,             // 32px
  '7': 2.5rem,           // 40px
  '8': 3rem,             // 48px
  '9': 4rem,             // 64px
  '10': 5rem,            // 80px
  '11': 6rem,            // 96px
  '12': 8rem,            // 128px
);

// Semantic spacing tokens for common UI patterns
$semantic-spacing: (
  'none': map.get($spacing-scale, '0'),
  'xs': map.get($spacing-scale, '1'),
  'sm': map.get($spacing-scale, '2'),
  'md': map.get($spacing-scale, '4'),
  'lg': map.get($spacing-scale, '6'),
  'xl': map.get($spacing-scale, '8'),
  'xxl': map.get($spacing-scale, '10'),
);

// Component-specific spacing tokens
$component-spacing: (
  'card': (
    'padding': map.get($spacing-scale, '5'),
    'gap': map.get($spacing-scale, '4'),
    'margin': map.get($spacing-scale, '5'),
  ),
  'form': (
    'field-gap': map.get($spacing-scale, '4'),
    'label-gap': map.get($spacing-scale, '2'),
    'group-gap': map.get($spacing-scale, '6'),
  ),
  'button': (
    'padding-x': map.get($spacing-scale, '4'),
    'padding-y': map.get($spacing-scale, '2'),
    'gap': map.get($spacing-scale, '2'),
  ),
  'section': (
    'padding': map.get($spacing-scale, '6'),
    'margin': map.get($spacing-scale, '8'),
    'gap': map.get($spacing-scale, '6'),
  ),
  'container': (
    'padding-x': map.get($spacing-scale, '4'),
    'padding-y': map.get($spacing-scale, '6'),
  ),
  'tool': (
    'padding': map.get($spacing-scale, '6'),
    'gap': map.get($spacing-scale, '5'),
    'section-gap': map.get($spacing-scale, '8'),
  ),
);

// Responsive spacing that adjusts based on viewport size
$responsive-spacing: (
  'container-padding': (
    'mobile': map.get($spacing-scale, '3'),
    'tablet': map.get($spacing-scale, '4'),
    'desktop': map.get($spacing-scale, '5'),
  ),
  'section-gap': (
    'mobile': map.get($spacing-scale, '6'),
    'tablet': map.get($spacing-scale, '8'),
    'desktop': map.get($spacing-scale, '10'),
  ),
  'card-padding': (
    'mobile': map.get($spacing-scale, '4'),
    'tablet': map.get($spacing-scale, '5'),
    'desktop': map.get($spacing-scale, '5'),
  ),
);

// Legacy spacing map (for backward compatibility)
$spacing: (
  'xxs': map.get($spacing-scale, '1'),  // 0.25rem / 4px
  'xs': map.get($spacing-scale, '2'),   // 0.5rem / 8px
  'sm': map.get($spacing-scale, '4'),   // 1rem / 16px
  'md': map.get($spacing-scale, '5'),   // 1.5rem / 24px
  'lg': map.get($spacing-scale, '6'),   // 2rem / 32px
  'xl': map.get($spacing-scale, '7'),   // 2.5rem / 40px
  'xxl': map.get($spacing-scale, '8'),  // 3rem / 48px
  'xxxl': map.get($spacing-scale, '9')  // 4rem / 64px
);

////////////////////////////////////
// TYPOGRAPHY SYSTEM
////////////////////////////////////

// Base type scale using a modular ratio of 1.25 (major third)
$type-scale: (
  '1': 0.64rem,    // 10.24px (1rem / 1.25^2)
  '2': 0.8rem,     // 12.8px (1rem / 1.25)
  '3': 1rem,       // 16px (base)
  '4': 1.25rem,    // 20px (1rem * 1.25)
  '5': 1.563rem,   // 25px (1rem * 1.25^2)
  '6': 1.953rem,   // 31.25px (1rem * 1.25^3)
  '7': 2.441rem,   // 39.06px (1rem * 1.25^4)
  '8': 3.052rem,   // 48.83px (1rem * 1.25^5)
  '9': 3.815rem,   // 61.04px (1rem * 1.25^6)
);

// Semantic type scale for common UI patterns
$semantic-type-scale: (
  'xs': map.get($type-scale, '1'),
  'sm': map.get($type-scale, '2'),
  'base': map.get($type-scale, '3'),
  'md': map.get($type-scale, '4'),
  'lg': map.get($type-scale, '5'),
  'xl': map.get($type-scale, '6'),
  'xxl': map.get($type-scale, '7'),
  'xxxl': map.get($type-scale, '8'),
  'display': map.get($type-scale, '9'),
);

// Heading styles
$heading-styles: (
  'h1': (
    'font-size': map.get($type-scale, '8'),
    'font-weight': 700,
    'line-height': 1.2,
    'letter-spacing': -0.02em,
    'margin-top': map.get($spacing-scale, '6'),
    'margin-bottom': map.get($spacing-scale, '4'),
  ),
  'h2': (
    'font-size': map.get($type-scale, '7'),
    'font-weight': 700,
    'line-height': 1.2,
    'letter-spacing': -0.01em,
    'margin-top': map.get($spacing-scale, '6'),
    'margin-bottom': map.get($spacing-scale, '3'),
  ),
  'h3': (
    'font-size': map.get($type-scale, '6'),
    'font-weight': 600,
    'line-height': 1.3,
    'letter-spacing': 0,
    'margin-top': map.get($spacing-scale, '5'),
    'margin-bottom': map.get($spacing-scale, '3'),
  ),
  'h4': (
    'font-size': map.get($type-scale, '5'),
    'font-weight': 600,
    'line-height': 1.4,
    'letter-spacing': 0,
    'margin-top': map.get($spacing-scale, '4'),
    'margin-bottom': map.get($spacing-scale, '2'),
  ),
  'h5': (
    'font-size': map.get($type-scale, '4'),
    'font-weight': 600,
    'line-height': 1.4,
    'letter-spacing': 0,
    'margin-top': map.get($spacing-scale, '4'),
    'margin-bottom': map.get($spacing-scale, '2'),
  ),
  'h6': (
    'font-size': map.get($type-scale, '3'),
    'font-weight': 600,
    'line-height': 1.4,
    'letter-spacing': 0,
    'margin-top': map.get($spacing-scale, '4'),
    'margin-bottom': map.get($spacing-scale, '2'),
  ),
);

// Text styles
$text-styles: (
  'body': (
    'font-size': map.get($type-scale, '3'),
    'font-weight': 400,
    'line-height': 1.5,
    'letter-spacing': 0,
    'margin-bottom': map.get($spacing-scale, '4'),
  ),
  'body-large': (
    'font-size': map.get($type-scale, '4'),
    'font-weight': 400,
    'line-height': 1.5,
    'letter-spacing': 0,
    'margin-bottom': map.get($spacing-scale, '4'),
  ),
  'body-small': (
    'font-size': map.get($type-scale, '2'),
    'font-weight': 400,
    'line-height': 1.5,
    'letter-spacing': 0,
    'margin-bottom': map.get($spacing-scale, '3'),
  ),
  'caption': (
    'font-size': map.get($type-scale, '1'),
    'font-weight': 400,
    'line-height': 1.5,
    'letter-spacing': 0.01em,
    'margin-bottom': map.get($spacing-scale, '2'),
  ),
  'label': (
    'font-size': map.get($type-scale, '2'),
    'font-weight': 500,
    'line-height': 1.4,
    'letter-spacing': 0.01em,
    'margin-bottom': map.get($spacing-scale, '1'),
  ),
  'button': (
    'font-size': map.get($type-scale, '3'),
    'font-weight': 600,
    'line-height': 1.4,
    'letter-spacing': 0.01em,
  ),
  'overline': (
    'font-size': map.get($type-scale, '1'),
    'font-weight': 500,
    'line-height': 1.4,
    'letter-spacing': 0.05em,
    'text-transform': uppercase,
    'margin-bottom': map.get($spacing-scale, '1'),
  ),
);

// Fluid typography
$fluid-typography: (
  'h1': (
    'min': map.get($type-scale, '6'),
    'max': map.get($type-scale, '8'),
  ),
  'h2': (
    'min': map.get($type-scale, '5'),
    'max': map.get($type-scale, '7'),
  ),
  'h3': (
    'min': map.get($type-scale, '4'),
    'max': map.get($type-scale, '6'),
  ),
  'h4': (
    'min': map.get($type-scale, '3'),
    'max': map.get($type-scale, '5'),
  ),
  'body': (
    'min': map.get($type-scale, '2'),
    'max': map.get($type-scale, '3'),
  ),
  'body-large': (
    'min': map.get($type-scale, '3'),
    'max': map.get($type-scale, '4'),
  ),
);

// Responsive typography
$responsive-typography: (
  'h1': (
    'mobile': map.get($type-scale, '6'),
    'tablet': map.get($type-scale, '7'),
    'desktop': map.get($type-scale, '8'),
  ),
  'h2': (
    'mobile': map.get($type-scale, '5'),
    'tablet': map.get($type-scale, '6'),
    'desktop': map.get($type-scale, '7'),
  ),
  'h3': (
    'mobile': map.get($type-scale, '4'),
    'tablet': map.get($type-scale, '5'),
    'desktop': map.get($type-scale, '6'),
  ),
);

// Vertical rhythm
$vertical-rhythm: (
  'base': 1.5rem,  // Base line height (1.5 * 1rem)
  'half': 0.75rem, // Half line height
  'double': 3rem,  // Double line height
);

// Legacy font size map (for backward compatibility)
$font-sizes: (
  'xxs': map.get($type-scale, '1'),  // 0.64rem / ~10px
  'xs': map.get($type-scale, '2'),   // 0.8rem / ~13px
  'sm': 0.875rem,                    // 14px (custom size for backward compatibility)
  'md': map.get($type-scale, '3'),   // 1rem / 16px
  'lg': map.get($type-scale, '4'),   // 1.25rem / 20px
  'xl': map.get($type-scale, '5'),   // 1.563rem / ~25px
  'xxl': map.get($type-scale, '6'),  // 1.953rem / ~31px
  'xxxl': map.get($type-scale, '7'), // 2.441rem / ~39px
  'display': map.get($type-scale, '9') // 3.815rem / ~61px
);
$font-weights: (
  'light': 300,
  'regular': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700
);
$line-heights: (
  'tight': 1.2,
  'normal': 1.5,
  'loose': 1.8
);
$font-families: (
  'primary': ('Poppins', sans-serif),
  'secondary': ('Roboto', sans-serif),
  'monospace': ('Roboto Mono', monospace)
);

////////////////////////////////////
// BREAKPOINT SYSTEM
////////////////////////////////////

$bp-largest: 75em;     // 1200px
$bp-large: 62.5em;     // 1000px
$bp-medium: 50em;      // 800px
$bp-small: 37.5em;     // 600px
$bp-smallest: 31.25em; // 500px

$breakpoints: (
  'largest': $bp-largest,   // 1200px
  'large': $bp-large,       // 1000px
  'medium': $bp-medium,     // 800px
  'small': $bp-small,       // 600px
  'smallest': $bp-smallest  // 500px
);

////////////////////////////////////
// TRANSITIONS & ANIMATIONS
////////////////////////////////////

$transitions: (
  'duration': (
    'fast': 0.15s,
    'normal': 0.3s,
    'slow': 0.5s,
    'very-slow': 0.8s
  ),
  'timing': (
    'default': cubic-bezier(0.4, 0, 0.2, 1),
    'ease-in': cubic-bezier(0.4, 0, 1, 1),
    'ease-out': cubic-bezier(0, 0, 0.2, 1),
    'ease-in-out': cubic-bezier(0.4, 0, 0.2, 1),
    'bounce': cubic-bezier(0.175, 0.885, 0.32, 1.275)
  )
);

// Animation durations
$animation-durations: (
  'fast': 0.5s,
  'normal': 1s,
  'slow': 2s
);

////////////////////////////////////
// SHADOWS
////////////////////////////////////

// Elevation levels
$elevation-levels: (
  '0': 0,  // Surface level (no elevation)
  '1': 1,  // Low elevation (cards, buttons)
  '2': 2,  // Medium elevation (dropdowns, popovers)
  '3': 3,  // High elevation (dialogs, modals)
  '4': 4,  // Highest elevation (toasts, notifications)
);

// Shadow values for each elevation level
$shadow-values: (
  'light': (
    '0': none,
    '1': (
      0 2px 4px rgb(0 0 0 / 10%),
    ),
    '2': (
      0 4px 8px rgb(0 0 0 / 10%),
      0 2px 4px rgb(0 0 0 / 5%),
    ),
    '3': (
      0 8px 16px rgb(0 0 0 / 10%),
      0 4px 8px rgb(0 0 0 / 5%),
    ),
    '4': (
      0 16px 24px rgb(0 0 0 / 10%),
      0 6px 12px rgb(0 0 0 / 5%),
    ),
  ),
  'dark': (
    '0': none,
    '1': (
      0 2px 4px rgb(0 0 0 / 20%),
    ),
    '2': (
      0 4px 8px rgb(0 0 0 / 25%),
      0 2px 4px rgb(0 0 0 / 15%),
    ),
    '3': (
      0 8px 16px rgb(0 0 0 / 30%),
      0 4px 8px rgb(0 0 0 / 20%),
    ),
    '4': (
      0 16px 24px rgb(0 0 0 / 35%),
      0 6px 12px rgb(0 0 0 / 25%),
    ),
  ),
);

// UI state shadows
$state-shadows: (
  'light': (
    'hover': (
      0 4px 8px rgb(0 0 0 / 10%),
      0 2px 4px rgb(0 0 0 / 5%),
    ),
    'active': (
      0 2px 4px rgb(0 0 0 / 10%),
      0 1px 2px rgb(0 0 0 / 5%),
    ),
    'focus': (
      0 0 0 2px rgba(var(--color-primary-rgb), 0.2),
    ),
  ),
  'dark': (
    'hover': (
      0 4px 8px rgb(0 0 0 / 25%),
      0 2px 4px rgb(0 0 0 / 15%),
    ),
    'active': (
      0 2px 4px rgb(0 0 0 / 25%),
      0 1px 2px rgb(0 0 0 / 15%),
    ),
    'focus': (
      0 0 0 2px rgba(var(--color-primary-rgb), 0.4),
    ),
  ),
);

// Component-specific shadows
$component-shadows: (
  'light': (
    'card': map.get(map.get($shadow-values, 'light'), '1'),
    'dropdown': map.get(map.get($shadow-values, 'light'), '2'),
    'modal': map.get(map.get($shadow-values, 'light'), '3'),
    'toast': map.get(map.get($shadow-values, 'light'), '4'),
    'button': (
      0 2px 4px rgb(0 0 0 / 10%),
    ),
    'button-hover': (
      0 4px 8px rgb(0 0 0 / 10%),
      0 2px 4px rgb(0 0 0 / 5%),
    ),
    'input-focus': (
      0 0 0 2px rgba(var(--color-primary-rgb), 0.2),
    ),
  ),
  'dark': (
    'card': map.get(map.get($shadow-values, 'dark'), '1'),
    'dropdown': map.get(map.get($shadow-values, 'dark'), '2'),
    'modal': map.get(map.get($shadow-values, 'dark'), '3'),
    'toast': map.get(map.get($shadow-values, 'dark'), '4'),
    'button': (
      0 2px 4px rgb(0 0 0 / 20%),
    ),
    'button-hover': (
      0 4px 8px rgb(0 0 0 / 25%),
      0 2px 4px rgb(0 0 0 / 15%),
    ),
    'input-focus': (
      0 0 0 2px rgba(var(--color-primary-rgb), 0.4),
    ),
  ),
);

// Inner shadows
$inner-shadows: (
  'light': (
    'subtle': inset 0 1px 2px rgb(0 0 0 / 5%),
    'medium': inset 0 2px 4px rgb(0 0 0 / 10%),
    'strong': inset 0 4px 8px rgb(0 0 0 / 15%),
  ),
  'dark': (
    'subtle': inset 0 1px 2px rgb(0 0 0 / 15%),
    'medium': inset 0 2px 4px rgb(0 0 0 / 20%),
    'strong': inset 0 4px 8px rgb(0 0 0 / 25%),
  ),
);

// Legacy shadows map (for backward compatibility)
$shadows: (
  'none': none,
  'xs': map.get(map.get($shadow-values, 'light'), '1'),
  'sm': map.get(map.get($shadow-values, 'light'), '1'),
  'md': map.get(map.get($shadow-values, 'light'), '2'),
  'lg': map.get(map.get($shadow-values, 'light'), '3'),
  'xl': map.get(map.get($shadow-values, 'light'), '4'),
  'inner': map.get(map.get($inner-shadows, 'light'), 'medium')
);

////////////////////////////////////
// BORDER RADIUS
////////////////////////////////////

$border-radius: (
  'none': 0,
  'sm': 0.125rem,  // 2px
  'md': 0.25rem,   // 4px
  'lg': 0.5rem,    // 8px
  'xl': 1rem,      // 16px
  'full': 9999px
);

////////////////////////////////////
// Z-INDEX
////////////////////////////////////

$z-index: (
  'base': 1,
  'tooltip': 10,
  'dropdown': 20,
  'vignette': 30,
  'modal': 40,
  'overlay': 50,
  'theme-switch': 60,
  'navbar': 70,
  'frame': 80,
  'toast': 90,
  'max': 100
);

////////////////////////////////////
// CSS VARIABLES
////////////////////////////////////

:root {
  // Elevation shadows
  --shadow-0: none;
  --shadow-1: #{map.get(map.get($shadow-values, 'light'), '1')};
  --shadow-2: #{map.get(map.get($shadow-values, 'light'), '2')};
  --shadow-3: #{map.get(map.get($shadow-values, 'light'), '3')};
  --shadow-4: #{map.get(map.get($shadow-values, 'light'), '4')};
  
  // State shadows
  --shadow-hover: #{map.get(map.get($state-shadows, 'light'), 'hover')};
  --shadow-active: #{map.get(map.get($state-shadows, 'light'), 'active')};
  --shadow-focus: #{map.get(map.get($state-shadows, 'light'), 'focus')};
  
  // Component shadows
  --shadow-card: #{map.get(map.get($component-shadows, 'light'), 'card')};
  --shadow-dropdown: #{map.get(map.get($component-shadows, 'light'), 'dropdown')};
  --shadow-modal: #{map.get(map.get($component-shadows, 'light'), 'modal')};
  --shadow-toast: #{map.get(map.get($component-shadows, 'light'), 'toast')};
  --shadow-button: #{map.get(map.get($component-shadows, 'light'), 'button')};
  --shadow-button-hover: #{map.get(map.get($component-shadows, 'light'), 'button-hover')};
  --shadow-input-focus: #{map.get(map.get($component-shadows, 'light'), 'input-focus')};
  
  // Inner shadows
  --inner-shadow-subtle: #{map.get(map.get($inner-shadows, 'light'), 'subtle')};
  --inner-shadow-medium: #{map.get(map.get($inner-shadows, 'light'), 'medium')};
  --inner-shadow-strong: #{map.get(map.get($inner-shadows, 'light'), 'strong')};
}

.dark-theme {
  // Elevation shadows
  --shadow-0: none;
  --shadow-1: #{map.get(map.get($shadow-values, 'dark'), '1')};
  --shadow-2: #{map.get(map.get($shadow-values, 'dark'), '2')};
  --shadow-3: #{map.get(map.get($shadow-values, 'dark'), '3')};
  --shadow-4: #{map.get(map.get($shadow-values, 'dark'), '4')};
  
  // State shadows
  --shadow-hover: #{map.get(map.get($state-shadows, 'dark'), 'hover')};
  --shadow-active: #{map.get(map.get($state-shadows, 'dark'), 'active')};
  --shadow-focus: #{map.get(map.get($state-shadows, 'dark'), 'focus')};
  
  // Component shadows
  --shadow-card: #{map.get(map.get($component-shadows, 'dark'), 'card')};
  --shadow-dropdown: #{map.get(map.get($component-shadows, 'dark'), 'dropdown')};
  --shadow-modal: #{map.get(map.get($component-shadows, 'dark'), 'modal')};
  --shadow-toast: #{map.get(map.get($component-shadows, 'dark'), 'toast')};
  --shadow-button: #{map.get(map.get($component-shadows, 'dark'), 'button')};
  --shadow-button-hover: #{map.get(map.get($component-shadows, 'dark'), 'button-hover')};
  --shadow-input-focus: #{map.get(map.get($component-shadows, 'dark'), 'input-focus')};
  
  // Inner shadows
  --inner-shadow-subtle: #{map.get(map.get($inner-shadows, 'dark'), 'subtle')};
  --inner-shadow-medium: #{map.get(map.get($inner-shadows, 'dark'), 'medium')};
  --inner-shadow-strong: #{map.get(map.get($inner-shadows, 'dark'), 'strong')};
}

////////////////////////////////////
// LAYOUT
////////////////////////////////////

$layout: (
  'max-content-width': 1200px,
  'container-padding': map.get($spacing, 'lg')
);

////////////////////////////////////
// TOOL-SPECIFIC TOKENS
////////////////////////////////////

// Tool-specific design tokens moved from _variables.scss
// These tokens are used specifically by tool components and interfaces
$tool-tokens: (
  'button': (
    'background': rgb(255 255 255 / 10%),
    'border': rgb(255 255 255 / 20%),
    'hover-background': rgb(255 255 255 / 15%)
  ),
  'input': (
    'background': rgb(255 255 255 / 10%),
    'border': rgb(255 255 255 / 20%),
    'focus-background': rgb(255 255 255 / 15%),
    'focus-border': rgb(255 255 255 / 40%)
  ),
  'panel': (
    'background': rgba(map.get($grayscale, 'black'), 0.7),
    'border': rgba(map.get($grayscale, 'white'), 0.1)
  )
);

////////////////////////////////////
// EXPORT MAPS FOR JAVASCRIPT
////////////////////////////////////

:export {
  // Export breakpoints for JavaScript
  breakpointMobile: map.get($breakpoints, 'mobile');
  breakpointPhone: map.get($breakpoints, 'phone');
  breakpointTablet: map.get($breakpoints, 'tablet');
  breakpointDesktop: map.get($breakpoints, 'desktop');
  breakpointLarge: map.get($breakpoints, 'large');
  breakpointXlarge: map.get($breakpoints, 'xlarge');
  
  // Export theme colors for JavaScript
  themeSageBase: map.get(map.get($theme-colors, 'sage'), 'base');
  themeCoralBase: map.get(map.get($theme-colors, 'coral'), 'base');
  themeSandBase: map.get(map.get($theme-colors, 'sand'), 'base');
  themeIndigoBase: map.get(map.get($theme-colors, 'indigo'), 'base');
}

////////////////////////////////////
// FUNCTIONS
////////////////////////////////////

// Function to get a color from the theme-colors map
@function theme-color($theme, $variant: 'base') {
  @return map.get(map.get($theme-colors, $theme), $variant);
}

// Function to get RGB values for a theme color (for use in rgba())
@function theme-color-rgb($theme, $variant: 'base') {
  $color: theme-color($theme, $variant);

  @return color.channel($color, "red", $space: rgb), 
          color.channel($color, "green", $space: rgb), 
          color.channel($color, "blue", $space: rgb);
}

// Function to get a color from the grayscale map
@function gray($level) {
  @return map.get($grayscale, $level);
}

// Function to get RGB values for a grayscale color
@function gray-rgb($level) {
  $color: gray($level);

  @return color.channel($color, "red", $space: rgb), 
          color.channel($color, "green", $space: rgb), 
          color.channel($color, "blue", $space: rgb);
}

// Function to get a spacing value
@function spacing($size) {
  @return map.get($spacing, $size);
}

// Function to get a font size
@function font-size($size) {
  @return map.get($font-sizes, $size);
}

// Function to get a font weight
@function font-weight($weight) {
  @return map.get($font-weights, $weight);
}

// Function to get a breakpoint
@function breakpoint($size) {
  @return map.get($breakpoints, $size);
}

// Function to get a shadow
@function shadow($size) {
  @return map.get($shadows, $size);
}

// Function to get a z-index
@function z($layer) {
  @return map.get($z-index, $layer);
}

// Function to get a transition duration
@function transition-duration($speed: 'normal') {
  @return map.get(map.get($transitions, 'duration'), $speed);
}

// Function to get a transition timing function
@function transition-timing($type: 'default') {
  @return map.get(map.get($transitions, 'timing'), $type);
}

// Function to get a border radius
@function radius($size) {
  @return map.get($border-radius, $size);
}

// Function to get a tool-specific token value
@function tool($component, $property) {
  @if not map.has-key($tool-tokens, $component) {
    @error "Tool component '#{$component}' not found in $tool-tokens map";
  }
  
  @if not map.has-key(map.get($tool-tokens, $component), $property) {
    @error "Property '#{$property}' not found in tool component '#{$component}'";
  }
  
  @return map.get(map.get($tool-tokens, $component), $property);
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
@function scale($size) {
  $scales: (
    'sm': 1.02,
    'md': 1.05,
    'lg': 1.1
  );
  
  @return map.get($scales, $size);
} 