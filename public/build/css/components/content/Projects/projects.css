/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Get a component token safely with fallback
 * @param {String} $component - Component name
 * @param {String} $category - Category within component
 * @param {String} $token - Token name
 * @param {*} $fallback - Fallback value if token doesn't exist
 * @return {*} Token value or fallback
 */
/**
 * Get a theme color safely with fallback
 * @param {String} $name - Color name
 * @param {String} $variant - Color variant (base, light, dark, alt)
 * @param {*} $fallback - Fallback value if color doesn't exist
 * @return {*} Color value or fallback
 */
/**
 * Get a spacing value safely with fallback
 * @param {String} $size - Spacing size
 * @param {*} $fallback - Fallback value if spacing doesn't exist
 * @return {*} Spacing value or fallback
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
:export {
  phoneWidth: 31.25em;
  tabletSmWidth: 37.5em;
  tabletWidth: 50em;
  desktopSmWidth: 62.5em;
  desktopWidth: 75em;
  desktopLgWidth: 87.5em;
  smallWidth: 36em;
  mediumWidth: 48em;
}

:export {
  transitionTiming: cubic-bezier(0.4, 0, 0.2, 1);
  transitionDuration: 0.3s;
}

:root {
  --z-index-base: 1;
  --z-index-vignette: 2;
  --z-index-frame: 3;
  --z-index-navbar: 4;
  --z-index-theme-switch: 5;
  --theme-transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
  --theme-transition-duration: 0.3s;
  --theme-transition-duration-long: 0.5s;
}

.projects {
  margin: auto;
}
.projects__cards_container {
  display: flex;
  flex-wrap: wrap;
  margin: -0.7rem;
}
.projects__card {
  position: relative;
  margin: 0.7rem;
  flex: 1;
  min-width: 25rem;
  color: inherit;
  background-color: rgba(255, 255, 255, 0.2);
  padding: 2rem;
  text-decoration: none;
  backdrop-filter: blur(3px);
  box-shadow: rgba(0, 0, 0, 0.08) 0 0 5px;
  transition: all 0.3s ease-in-out;
  height: auto;
  max-height: 100%;
  overflow: hidden;
  opacity: 1;
  transform: scale(1);
  background-color: rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(15px);
  -webkit-backdrop-filter: blur(15px);
  border-radius: 4px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}
.projects__card:hover {
  background-color: rgba(255, 255, 255, 0.35);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.15);
}
@media only screen and (max-width: 37.5em) {
  .projects__card {
    min-width: 100%;
    margin: 0.7rem 0;
  }
}
.projects__card.filtered-out {
  width: 0;
  height: 0;
  padding: 0;
  margin: 0;
  opacity: 0;
  transform: scale(0);
  border-width: 0;
}
.projects__card h3 {
  font-size: 2rem;
  line-height: 1.3em;
  text-transform: uppercase;
}
.projects__card__keywords {
  top: 0;
  right: 0;
  text-align: right;
  float: right;
  height: 3rem;
  width: 10rem;
  shape-outside: margin-box;
}
.projects__card__label {
  font-size: 1.1rem;
  background-color: var(--color-grey-light-2);
  padding: 0.1rem 0.7rem;
  border-radius: 0.5rem;
  display: inline-block;
  margin-left: 0.5rem;
  transition: all 0.3s ease-in-out;
}
.light-theme .projects__card__label {
  filter: brightness(0.85) contrast(1.2);
  mix-blend-mode: multiply;
}
.dark-theme .projects__card__label {
  filter: brightness(1.15) contrast(0.95);
  mix-blend-mode: screen;
}
.projects__card__link {
  color: var(--color-grey-dark-1);
}
.projects__card__link:hover {
  background-color: var(--color-grey-light-2);
}
.projects__card:hover {
  box-shadow: rgba(0, 0, 0, 0.23) -6px 6px;
  cursor: pointer;
  background-color: rgba(255, 255, 255, 0.1);
  max-height: 40rem;
  border-radius: 8px;
}

.projects__card p,
.projects__card p.date {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease-in-out;
}

.projects__card p.show-text,
.projects__card:hover p,
.projects__card:hover p.date,
.projects__card p.date.show-text {
  max-height: 100vh;
}

.light-theme .projects__card {
  background-color: rgba(255, 255, 255, 0.65);
  backdrop-filter: blur(8px);
  box-shadow: rgba(0, 0, 0, 0.1) 0 0 8px;
}
.light-theme .projects__card:hover {
  background-color: rgba(255, 255, 255, 0.75);
  backdrop-filter: blur(10px);
  box-shadow: rgba(0, 0, 0, 0.25) -6px 6px;
}

.dark-theme .projects__card {
  background-color: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(3px);
}
.dark-theme .projects__card:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.project-image {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-width: 100%;
  max-height: 50vh;
  opacity: 0;
  object-fit: contain;
  transition: opacity 0.2s, transform 0.5s;
}

.projects__card:hover .project-image {
  opacity: 1;
  transform: translate(-50%, -50%) scale(1.2);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15), 0 6px 6px rgba(0, 0, 0, 0.1);
}

.filter-buttons {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  margin-bottom: 2rem;
}

.filter-buttons button {
  font-family: Inter, sans-serif;
  padding: 4px 10px;
  margin: 4px;
  border-radius: 9999px;
  user-select: none;
  cursor: pointer;
  background-color: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(3px);
  border: 1px solid rgba(255, 255, 255, 0.3);
  transition: background-color 300ms ease-in-out, color 300ms ease-in-out, border-color 300ms ease-in-out, filter 300ms ease-in-out, box-shadow 300ms ease-in-out;
}
.light-theme .filter-buttons button {
  background-color: rgba(255, 255, 255, 0.65);
  backdrop-filter: blur(8px);
  box-shadow: rgba(0, 0, 0, 0.1) 0 0 8px;
}
.dark-theme .filter-buttons button {
  background-color: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(3px);
}
.filter-buttons button:hover, .filter-buttons button:focus {
  opacity: 0.9;
  box-shadow: rgba(0, 0, 0, 0.15) 0 2px 4px;
}
.light-theme .filter-buttons button:hover, .light-theme .filter-buttons button:focus {
  background-color: rgba(255, 255, 255, 0.75);
}
.dark-theme .filter-buttons button:hover, .dark-theme .filter-buttons button:focus {
  background-color: rgba(255, 255, 255, 0.25);
}
