:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1),
    0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25),
    0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35),
    0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25),
    0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
.header {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
.header__text {
  margin-left: 3rem;
}
.header__text h1,
.header__text h2,
.header__text h3 {
  line-height: normal;
  display: inline;
  transition: color 0.5s;
  margin-right: 0.3em;
}
.header__text h1 {
  font-size: 5rem;
  text-transform: uppercase;
}
.header__text h1:hover {
  color: var(--header-hover);
}
.header__text h2 {
  font-size: 2rem;
  margin-bottom: 0.4em;
  text-transform: none;
}
.header__text h2:hover {
  color: var(--header-hover);
}
.header__text h3 {
  font-size: 1.8rem;
  text-transform: none;
}
.header__text h3:hover {
  color: var(--header-tertiary);
}
.header__image-container {
  margin: 1rem;
  flex-shrink: 2;
  max-width: 25rem;
  position: relative;
  width: 25rem;
  height: 25rem;
}
.header__image-container button {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  width: 100%;
  height: 100%;
  position: relative;
  display: block;
}
.header__image-container button img {
  position: absolute;
  top: 0;
  left: 0;
  transition: opacity 0.5s ease;
  width: 100%;
  height: 100%;
  opacity: 0;
  object-fit: cover;
  border-radius: 50%;
  pointer-events: none;
  will-change: opacity;
}
.header__image-container button img.active {
  opacity: 1;
  pointer-events: auto;
}
@media (max-width: 50em) {
  .header {
    flex-direction: column;
  }
  .header__text {
    text-align: center;
    margin-left: 0;
    margin-top: 3rem;
  }
  .header__text h1 {
    font-size: 4rem;
  }
  .header__text h2 {
    font-size: 3rem;
    line-height: 1.1em;
  }
  .header__text h3 {
    font-size: 1.8rem;
    line-height: 1em;
  }
}
@media (max-width: 37.5em) {
  .header h1 {
    font-size: 2.8rem;
  }
  .header h2 {
    font-size: 1.8rem;
    line-height: 1.2em;
  }
  .header h3 {
    font-size: 1.6rem;
    line-height: 1.1em;
  }
}
@media (max-width: 31.25em) {
  .header h1 {
    font-size: 2.4rem;
  }
  .header h2 {
    font-size: 1.6rem;
    line-height: 1.2em;
  }
  .header h3 {
    font-size: 1.4rem;
    line-height: 1.1em;
  }
}

.social {
  margin-top: 1rem;
}
.social__icon {
  height: 4rem;
  width: 4rem;
  color: var(--text);
  padding: 0.7rem;
  display: inline;
}
.social__icon:hover {
  color: var(--header-hover);
}
.social__icon button {
  color: inherit;
  text-decoration: none;
  background: none;
  border: none;
  padding: 0;
}
.social__icon button i {
  color: inherit;
  font-size: 2.5em;
  transition: color 0.5s;
}
.social__icon button i:hover {
  color: var(--border-color-sand-dark);
}

.avatar,
.header__image-container button img {
  --image-size: 100%;
  --init-scale: 1;
  --border-thickness: 5%;
  --border-color: var(--profile-pic-bg-color);
  width: var(--image-size);
  --mask-gradient: 50% / calc(100% / var(--init-scale)) 100% no-repeat
    content-box;
  --outline-offset-calculated: calc(
    (var(--init-scale) - 1) * var(--image-size) / 2 - var(--border-thickness)
  );
  outline: var(--border-thickness) solid var(--border-color);
  outline-offset: var(--outline-offset-calculated);
  background: radial-gradient(
      circle closest-side,
      var(--border-color) calc(99% - var(--border-thickness)),
      var(--border-color) calc(100% - var(--border-thickness)) 99%,
      rgba(0, 0, 0, 0)
    )
    var(--mask-gradient);
  mask:
    linear-gradient(#000 0 0) no-repeat 50%
      calc(1px - var(--outline-offset-calculated)) /
      calc(100% / var(--init-scale) - 2 * var(--border-thickness) - 2px) 50%,
    radial-gradient(circle closest-side, #000 100%, rgba(0, 0, 0, 0))
      var(--mask-gradient);
  transform: scale(var(--init-scale));
  transition: 0.5s;
}
.avatar:hover,
.header__image-container button img:hover {
  --init-scale: 1.25;
}

.letter {
  display: inline-block;
  transition: transform 0.2s ease-in-out;
  transform: translate(var(--x, 0), var(--y, 0)) rotate(var(--r, 0))
    scale(var(--image-size, 1));
}

h1:hover .letter,
h2:hover .letter,
h3:hover .letter {
  z-index: 2;
  text-shadow: var(--text-shadow);
  --image-size: 1.15;
}

@media (max-width: 50em) {
  .social__icon i {
    font-size: 2em;
  }
}
@media (max-width: 37.5em) {
  .social__icon i {
    font-size: 1.8em;
  }
}
@media (max-width: 31.25em) {
  .social__icon i {
    font-size: 1.6em;
  }
}
