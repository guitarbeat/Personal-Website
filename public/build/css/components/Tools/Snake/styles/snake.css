/**
 * Responsive Design Utilities
 *
 * This module provides utility mixins and functions for responsive design,
 * building on top of breakpoint values defined in _tokens.scss.
 *
 * It maintains backward compatibility with legacy variables but provides
 * enhanced functionality through mixins that make responsive design easier.
 *
 * @example
 * ```scss
 * @use "breakpoints" as bp;
 * 
 * // Media query for specific breakpoint and below
 * @include bp.down('medium') {
 *   // Styles for medium breakpoint and below
 * }
 * 
 * // Media query between two breakpoints
 * @include bp.between('small', 'large') {
 *   // Styles for between small and large
 * }
 * 
 * // Responsive property values
 * @include bp.responsive((
 *   'base': 1rem,
 *   'small': 1.25rem,
 *   'medium': 1.5rem,
 *   'large': 2rem
 * )) using ($value) {
 *   font-size: $value;
 * }
 * ```
 */
:root {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.05);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.1), 0 6px 12px rgba(0, 0, 0, 0.05);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.15);
}

.dark-theme {
  --shadow-0: none;
  --shadow-1: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-2: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-3: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-4: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-active: 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.15);
  --shadow-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --shadow-card: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-dropdown: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-modal: 0 8px 16px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.2);
  --shadow-toast: 0 16px 24px rgba(0, 0, 0, 0.35), 0 6px 12px rgba(0, 0, 0, 0.25);
  --shadow-button: 0 2px 4px rgba(0, 0, 0, 0.2);
  --shadow-button-hover: 0 4px 8px rgba(0, 0, 0, 0.25), 0 2px 4px rgba(0, 0, 0, 0.15);
  --shadow-input-focus: 0 0 0 2px rgba(var(--color-primary-rgb), 0.4);
  --inner-shadow-subtle: inset 0 1px 2px rgba(0, 0, 0, 0.15);
  --inner-shadow-medium: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  --inner-shadow-strong: inset 0 4px 8px rgba(0, 0, 0, 0.25);
}

:export {
  breakpointLarge: 62.5em;
  themeSageBase: #0b7abd;
  themeCoralBase: #e15b18;
  themeSandBase: #a8958c;
  themeIndigoBase: #1a1a1d;
}

/**
 * Get a scale value
 * @param {String} $size - Size of the scale (sm, md, lg)
 * @return {Number} Scale value
 */
/**
 * Get a component token safely with fallback
 * @param {String} $component - Component name
 * @param {String} $category - Category within component
 * @param {String} $token - Token name
 * @param {*} $fallback - Fallback value if token doesn't exist
 * @return {*} Token value or fallback
 */
/**
 * Get a theme color safely with fallback
 * @param {String} $name - Color name
 * @param {String} $variant - Color variant (base, light, dark, alt)
 * @param {*} $fallback - Fallback value if color doesn't exist
 * @return {*} Color value or fallback
 */
/**
 * Get a spacing value safely with fallback
 * @param {String} $size - Spacing size
 * @param {*} $fallback - Fallback value if spacing doesn't exist
 * @return {*} Spacing value or fallback
 */
/**
 * Generate a media query for screens with width less than or equal to the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width greater than the specified breakpoint
 * @param {String} $breakpoint - The breakpoint name (smallest, small, medium, large, largest)
 */
/**
 * Generate a media query for screens with width between two breakpoints
 * @param {String} $min - The minimum breakpoint name
 * @param {String} $max - The maximum breakpoint name
 */
/**
 * Generate a media query for a specific breakpoint only
 * @param {String} $breakpoint - The breakpoint name
 */
/**
 * Apply different styles at different breakpoints
 * @param {Map} $values - Map of breakpoint names to values
 */
/**
 * Generate a container that is full width until it reaches a breakpoint
 * @param {String} $breakpoint - The breakpoint at which to constrain width
 * @param {Number} $padding - The padding to apply at smaller screens
 */
/**
 * Generate a fluid value that scales between two sizes based on viewport width
 * @param {Number} $min-value - The minimum value
 * @param {Number} $max-value - The maximum value
 * @param {String} $min-breakpoint - The minimum breakpoint name
 * @param {String} $max-breakpoint - The maximum breakpoint name
 * @param {String} $property - The CSS property to apply the fluid value to
 */
/**
 * Remove the unit from a number
 * @param {Number} $number - The number with a unit
 * @return {Number} The number without a unit
 */
.snake-game-container h1,
.snake-game-container h2,
.snake-game-container h3 {
  text-transform: uppercase;
}

.snake-game-container {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
}
.snake-game-container canvas {
  display: block;
  margin: 0 auto;
}
.snake-game-container .controls {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  margin-top: 1rem;
}
.snake-game-container .controls .control-row {
  display: flex;
  margin: 0.25rem 0;
}
.snake-game-container .controls button {
  width: 3rem;
  height: 3rem;
  margin: 0 0.25rem;
  border: 1px solid var(--about-glass-border, rgba(255, 255, 255, 0.1));
  background: rgba(0, 0, 0, 0.5);
  color: var(--color-text, #e9ecef);
  border-radius: var(--about-border-radius, 0.25rem);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.snake-game-container .controls button:hover {
  background: rgba(0, 0, 0, 0.7);
}
.snake-game-container .controls button:active {
  transform: scale(0.95);
}
.snake-game-container .game-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
  z-index: 10;
}
.snake-game-container .game-overlay h2 {
  font-family: "Press Start 2P", cursive;
  color: var(--color-coral, #e15b18);
  margin-bottom: 1rem;
  text-transform: uppercase;
}
.snake-game-container .game-overlay button {
  font-family: "Press Start 2P", cursive;
  padding: 0.5rem 1.5rem;
  background: var(--color-sage, #0b7abd);
  border: none;
  border-radius: var(--about-border-radius, 0.25rem);
  color: var(--color-indigo, #1a1a1d);
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.snake-game-container .game-overlay button:hover {
  background: var(--color-sage-light, #1eaae0);
}
.snake-game-container .game-overlay button:active {
  transform: scale(0.95);
}
.snake-game-container .score-display {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(26, 26, 29, 0.9);
  padding: 0.5rem 1rem;
  border-radius: var(--about-border-radius, 0.25rem);
  font-family: "Press Start 2P", cursive;
  font-size: 0.8rem;
}
.snake-game-container .score-display .current-score {
  color: var(--color-text-light, #dee2e6);
}
.snake-game-container .score-display .high-score {
  color: var(--color-success, #1eaae0);
}
.snake-game-container .mute-button {
  position: absolute;
  bottom: 1rem;
  right: 1rem;
  background: rgba(26, 26, 29, 0.9);
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.snake-game-container .mute-button:hover {
  background: #1a1a1d;
}
.snake-game-container .mute-button svg {
  width: 1.2rem;
  height: 1.2rem;
  fill: var(--color-text-light, #dee2e6);
}
.snake-game-container .mute-button.muted svg {
  fill: var(--color-coral, #e15b18);
}

@media only screen and (max-width: 50em) {
  .snake-game-container .controls button {
    width: 2.5rem;
    height: 2.5rem;
  }
  .snake-game-container .score-display {
    font-size: 0.64rem;
  }
}
