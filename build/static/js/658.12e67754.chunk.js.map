{"version":3,"file":"static/js/658.12e67754.chunk.js","mappings":"qKACO,MAAMA,EACJ,CACPC,WAAY,wBACZC,MAAO,CACNC,SAAU,CAAC,UAAW,UAAW,WACjCC,KAAM,WAEPC,UAAW,CACVF,SAAU,CAAC,UAAW,WACtBC,KAAM,WAEPE,KAAM,CACLH,SAAU,CAAC,UAAW,WACtBC,KAAM,WAEPG,OAAQ,UACRC,UAAW,4BACXC,KAAM,UACNC,SAAU,UACVC,gBAAiB,wBACjBC,UAAW,WApBAZ,EAuBA,CACXa,YAAa,GACbC,YAAa,GACbC,aAAc,EACdC,cAAe,EACfC,WAAY,GACZC,WAAY,GACZC,gBAAiB,IA9BNnB,EAiCA,CACXoB,WAAY,CACXC,OAAQ,IACRC,QAAS,IAEVC,UAAW,IACXC,aAAc,KACdC,eAAgB,KAChBC,eAAgB,KAChBC,mBAAoB,GACpBC,iBAAkB,IAClBC,cAAe,GACfC,iBAAkB,IAClBC,gBAAiB,GACjBC,cAAe,EACfC,aAAc,IAKHC,EACM,IAONC,EAAc,CAC1BC,SAAU,GACVC,mBAAoB,EACpBC,WAAY,EACZC,cAAe,EACfC,SAAU,CACTC,GAAI,CAAC,UAAW,IAAK,KACrBC,KAAM,CAAC,YAAa,IAAK,KACzBC,KAAM,CAAC,YAAa,IAAK,KACzBC,MAAO,CAAC,aAAc,IAAK,KAC3BC,MAAO,CAAC,QAAS,IAAK,KACtBC,QAAS,CAAC,IAAK,O,kCCMjB,MAAMC,EAAe,IA7ErB,MACCC,WAAAA,GAECC,KAAKC,UAAY,IAAIC,EAAAA,GAAW,CAC/BC,WAAY,CACXC,KAAM,QAEPC,SAAU,CACTC,OAAQ,IACRC,MAAO,GACPC,QAAS,EACTC,QAAS,MAERC,gBAEHV,KAAKW,cAAgB,IAAIT,EAAAA,GAAeA,EAAAA,GAAY,CACnDC,WAAY,CACXC,KAAM,YAEPC,SAAU,CACTC,OAAQ,IACRC,MAAO,GACPC,QAAS,EACTC,QAAS,MAERC,gBAEHV,KAAKY,UAAY,IAAIV,EAAAA,GAAW,CAC/BC,WAAY,CACXC,KAAM,UAEPC,SAAU,CACTC,OAAQ,IACRC,MAAO,IACPC,QAAS,EACTC,QAAS,KAEVI,QAAS,KACPH,gBAGHV,KAAKc,cAAgB,IAAIZ,EAAAA,EAAmB,KAAM,IAAKQ,gBACvDV,KAAKW,cAAcI,QAAQf,KAAKc,cACjC,CAEA,gBAAME,GAEL,GAA2B,YAAvBd,EAAAA,GAAae,MAChB,UACOf,EAAAA,KACNgB,QAAQC,IAAI,wBACb,CAAE,MAAOC,GACRF,QAAQG,KAAK,iCAAkCD,EAChD,CAEF,CAEAE,eAAAA,GACCtB,KAAKC,UAAUsB,qBAAqB,KAAM,MAC3C,CAEAC,YAAAA,GAEC,MAAMC,EAAMvB,EAAAA,KACZF,KAAKW,cAAcY,qBAClB,CAAC,KAAM,KAAM,KAAM,MACnB,KACAE,EAEF,CAEAC,QAAAA,GACC1B,KAAKY,UAAUW,qBAAqB,KAAM,MAC3C,GCrEKI,EAAkBA,CAACC,EAAMC,IACvBD,EAAKE,IAAMD,EAAKC,GAAKF,EAAKG,IAAMF,EAAKE,EAGtC,MAAMC,UAAmBC,EAAAA,MAC/BlC,WAAAA,GAA+B,IAAnBmC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACnBG,MAAM,CAAEC,IAAK,eACbvC,KAAKiB,MAAQ,CACZhE,MAAO,GACPI,KAAM,KACNmF,UAAW,CAAEV,EAAG,EAAGC,EAAG,GACtBU,cAAe,CAAEX,EAAG,EAAGC,EAAG,GAC1BW,MAAO,EACPjF,UAAU,EACVkF,WAAY,GAEb3C,KAAK4C,UAAY,GACjB5C,KAAK6C,WAAa,EAClB7C,KAAK8C,SAAW,IAChB9C,KAAK+C,QAAU,EACf/C,KAAKkC,SAAWA,EAChBlC,KAAKgD,UAAYd,EACdnF,EAAiBoB,WAAWC,OAC5BrB,EAAiBoB,WAAWE,QAC/B2B,KAAKrC,UACJsF,OAAOC,SAASC,aAAaC,QAAQ,oBAAsB,EAC5DpD,KAAKqD,OAAS,IAAIC,MAClBtD,KAAKqD,OAAOE,IAAMC,EAClBxD,KAAKyD,gBAAkB,IACxB,CAEA,YAAMC,CAAOC,GACZ3D,KAAK2D,WAAaA,EAClB3D,KAAK4D,SAAWD,EAAWC,eACrBC,EAAM7C,aACZhB,KAAK8D,iBACL9D,KAAK+D,aACL/D,KAAKgE,qBACN,CAEAF,cAAAA,GACC,MAAMG,EAAUC,KAAKC,MAAMjF,EAAYC,SAAW,GAAKa,KAAK4D,SACtDQ,EAAUF,KAAKC,MAAMjF,EAAYC,SAAW,GAAKa,KAAK4D,SAE5D5D,KAAKiB,MAAMhE,MAAQ,CAAC,CAAE6E,EAAGmC,EAASlC,EAAGqC,IACrCpE,KAAKiB,MAAMuB,UAAY,CAAEV,EAAG9B,KAAK4D,SAAU7B,EAAG,GAC9C/B,KAAKiB,MAAMwB,cAAgB,CAAEX,EAAG9B,KAAK4D,SAAU7B,EAAG,GAClD/B,KAAKqE,YACLrE,KAAKiB,MAAMyB,MAAQ,EACnB1C,KAAKiB,MAAMxD,UAAW,CACvB,CAEAsG,UAAAA,GACC/D,KAAKyD,gBAAmBa,IACvBtE,KAAKuE,eAAeD,EAAME,MAEzB,CAAC,UAAW,YAAa,YAAa,cAAcC,SAASH,EAAME,OAEnEF,EAAMI,gBACP,EAEDC,SAASC,iBAAiB,UAAW5E,KAAKyD,gBAC3C,CAEAc,cAAAA,CAAehC,GACd,GAAIvC,KAAKiB,MAAMxD,WAAqB,UAAR8E,GAA2B,UAARA,GAE9C,YADAvC,KAAK8D,iBAIN,MAAM,UAAEtB,GAAcxC,KAAKiB,OACrB,SAAE2C,GAAa5D,KAErB,OAAQuC,GACP,IAAK,UACgB,IAAhBC,EAAUT,IACb/B,KAAKiB,MAAMwB,cAAgB,CAAEX,EAAG,EAAGC,GAAI6B,IAExC,MACD,IAAK,YACgB,IAAhBpB,EAAUT,IACb/B,KAAKiB,MAAMwB,cAAgB,CAAEX,EAAG,EAAGC,EAAG6B,IAEvC,MACD,IAAK,YACgB,IAAhBpB,EAAUV,IACb9B,KAAKiB,MAAMwB,cAAgB,CAAEX,GAAI8B,EAAU7B,EAAG,IAE/C,MACD,IAAK,aACgB,IAAhBS,EAAUV,IACb9B,KAAKiB,MAAMwB,cAAgB,CAAEX,EAAG8B,EAAU7B,EAAG,IAE9C,MACD,IAAK,QACL,IAAK,QACA/B,KAAKiB,MAAMxD,UACduC,KAAK8D,iBAMT,CAEAe,oBAAAA,GAOC,MAAO,CAAE/C,EALRoC,KAAKC,MAAMD,KAAKY,UAAY9E,KAAK2D,WAAWoB,MAAQ/E,KAAK4D,WACzD5D,KAAK4D,SAIM7B,EAFXmC,KAAKC,MAAMD,KAAKY,UAAY9E,KAAK2D,WAAWqB,OAAShF,KAAK4D,WAC1D5D,KAAK4D,SAEP,CAEAqB,mBAAAA,CAAoB5H,GACnB,OAAQ2C,KAAKiB,MAAMhE,MAAMiI,MAAMC,GAAYnF,KAAKoF,YAAYD,EAAS9H,IACtE,CAEAgH,SAAAA,GACC,IAAIgB,EACJ,GACCA,EAAUrF,KAAK6E,8BACN7E,KAAKiF,oBAAoBI,IAEnCrF,KAAKiB,MAAM5D,KAAOgI,CACnB,CAEAD,WAAAA,CAAYxD,EAAMC,GAEjB,OAAOF,EAAgBC,EAAMC,EAC9B,CAEAyD,eAAAA,GACC,MAAM,KAAEjI,GAAS2C,KAAKiB,MAEhBsE,EAAUvF,KAAK+C,QAErB,IAAK,IAAIyC,EAAI,EAAGA,EAHM,GAGaA,IAAK,CACvC,MAAMC,EAAmB,EAAVvB,KAAKwB,GAASF,EAJR,GAKfG,EAAQ,EAAoB,EAAhBzB,KAAKY,SACjBc,EAAO,EAAoB,EAAhB1B,KAAKY,SAEtB9E,KAAK4C,UAAUiD,KAAK,CACnB/D,EAAGzE,EAAKyE,EAAI9B,KAAK4D,SAAW,EAC5B7B,EAAG1E,EAAK0E,EAAI/B,KAAK4D,SAAW,EAC5BkC,GAAI5B,KAAK6B,IAAIN,GAASE,EACtBK,GAAI9B,KAAK+B,IAAIR,GAASE,EACtBC,OACAM,KAAM,EACNC,KAAMZ,EAA0B,GAAhBrB,KAAKY,UAAiB,IACtCsB,KAAM,WACL,GAAIpG,KAAKkG,MAAQ,EAChB,OAGD,MAAMG,EAAMrG,KAAKsG,KAAKC,QACtBF,EAAIG,YACJH,EAAII,UAAS,QAAAC,OAAW1G,KAAKmG,IAAG,gBAAAO,OAAe1G,KAAKkG,KAAI,KACxDG,EAAIM,YAAW,QAAAD,OAAW1G,KAAKmG,IAAG,gBAAAO,OAAe1G,KAAKkG,KAAI,KAC1DG,EAAIrI,WAAa,EACjBqI,EAAIO,SAAS5G,KAAK8B,EAAG9B,KAAK+B,EAAG/B,KAAK4F,KAAM5F,KAAK4F,MAC7CS,EAAIrI,WAAa,EAGjBgC,KAAK8B,GAAK9B,KAAK8F,GACf9F,KAAK+B,GAAK/B,KAAKgG,GACfhG,KAAKkG,MAAQ,GACd,EAAEW,KAAK7G,OAET,CACD,CAEA8G,MAAAA,CAAOC,GACF/G,KAAKiB,MAAMxD,WAKfuC,KAAK8C,UAAY9C,KAAK8C,SAAW,IAAO,IACxC9C,KAAK+C,SAAW/C,KAAK+C,QAAU,GAAK,IAGhCgE,EAAO/G,KAAKiB,MAAM0B,WAAa3C,KAAKgD,YAIxChD,KAAKiB,MAAM0B,WAAaoE,EACxB/G,KAAKgH,YACDhH,KAAKiH,oBAGTjH,KAAKoG,OACLpG,KAAKkH,oBACN,CAEAD,eAAAA,GACC,MAAM,MAAEhK,GAAU+C,KAAKiB,MACjBkG,EAAOlK,EAAM,GAGnB,IAAK,IAAIuI,EAAI,EAAGA,EAAIvI,EAAMmF,OAAQoD,IACjC,GAAI7D,EAAgBwF,EAAMlK,EAAMuI,IAG/B,OAFAxF,KAAKiB,MAAMxD,UAAW,EACtBoG,EAAMrC,gBACC,EAGT,OAAO,CACR,CAEAwF,SAAAA,GACC,MAAM,MAAE/J,EAAK,cAAEwF,EAAa,KAAEpF,GAAS2C,KAAKiB,MACtCkG,GAAIC,EAAAA,EAAAA,GAAA,GAAQnK,EAAM,IAExB+C,KAAKiB,MAAMuB,UAAYC,EACvB0E,EAAKrF,GAAKW,EAAcX,EACxBqF,EAAKpF,GAAKU,EAAcV,EAGxB,MAAM,MAAEgD,EAAK,OAAEC,GAAWhF,KAAK2D,WAE3BwD,EAAKrF,GAAKiD,IACboC,EAAKrF,EAAI,GAENqF,EAAKrF,EAAI,IACZqF,EAAKrF,EAAIiD,EAAQ/E,KAAK4D,UAEnBuD,EAAKpF,GAAKiD,IACbmC,EAAKpF,EAAI,GAENoF,EAAKpF,EAAI,IACZoF,EAAKpF,EAAIiD,EAAShF,KAAK4D,UAGxB3G,EAAMoK,QAAQF,GAGVxF,EAAgBwF,EAAM9J,IAEzBwG,EAAMvC,kBAGNtB,KAAKiB,MAAMyB,QAGX1C,KAAKsF,kBAGLtF,KAAKqE,YAGDrE,KAAKiB,MAAMyB,MAAQ1C,KAAKrC,YAC3BqC,KAAKrC,UAAYqC,KAAKiB,MAAMyB,MAC5BS,aAAamE,QAAQ,iBAAkBtH,KAAKiB,MAAMyB,SAMnDzF,EAAMsK,KAER,CAEAL,eAAAA,GACC,IAAK,IAAI1B,EAAIxF,KAAK4C,UAAUR,OAAS,EAAGoD,GAAK,EAAGA,IAC/CxF,KAAK4C,UAAU4C,GAAGY,OACdpG,KAAK4C,UAAU4C,GAAGU,MAAQ,GAC7BlG,KAAK4C,UAAU4E,OAAOhC,EAAG,EAG5B,CAEAY,IAAAA,GACC,MAAM,MAAEnJ,EAAK,KAAEI,GAAS2C,KAAKiB,MACvBoF,EAAMrG,KAAKsG,KAAKC,QAGtBF,EAAIoB,UAAU,EAAG,EAAGzH,KAAK2D,WAAWoB,MAAO/E,KAAK2D,WAAWqB,QAG3DhF,KAAK0H,WAGL,IAAK,MAAOC,EAAOxC,KAAYlI,EAAM2K,UAAW,CAC/C,MAAMC,EAAmB,IAAVF,EACftB,EAAIG,YAGJ,MAAMsB,GAAc9H,KAAK8C,SAAmB,EAAR6E,GAAa,IAC3CI,EAAS,OAAArB,OAAUoB,EAAU,WAAApB,OAAUmB,EAAS,GAAK,GAAE,MACvDG,EAAS,OAAAtB,OAAUoB,EAAU,eAEnCzB,EAAII,UAAYsB,EAChB1B,EAAIM,YAAcqB,EAClB3B,EAAIrI,WAAa6J,EAAS,GAAK,GAC/BxB,EAAIO,SAASzB,EAAQrD,EAAGqD,EAAQpD,EAAG/B,KAAK4D,SAAW,EAAG5D,KAAK4D,SAAW,EACvE,CAIA,GAHAyC,EAAIrI,WAAa,EAGbX,EAAM,CACTgJ,EAAI4B,OAGJ,MAAMC,EAAS,OAAAxB,OAAU1G,KAAK+C,QAAO,eAC/BoF,EAAQ,OAAAzB,OAAU1G,KAAK+C,QAAO,eAGpCsD,EAAIM,YAAcwB,EAClB9B,EAAIrI,WAAa,GAGjBqI,EAAI+B,UACHpI,KAAKqD,OACLhG,EAAKyE,EACLzE,EAAK0E,EACL/B,KAAK4D,SAAW,EAChB5D,KAAK4D,SAAW,GAIjByC,EAAIgC,yBAA2B,UAC/BhC,EAAII,UAAYyB,EAChB7B,EAAIO,SAASvJ,EAAKyE,EAAGzE,EAAK0E,EAAG/B,KAAK4D,SAAW,EAAG5D,KAAK4D,SAAW,GAGhEyC,EAAIgC,yBAA2B,cAC/BhC,EAAII,UAAY,2BAChB,MAAM6B,EAAY,EAClB,IAAK,IAAIxG,EAAI,EAAGA,EAAI9B,KAAK4D,SAAW,EAAG9B,GAAKwG,EAC3C,IAAK,IAAIvG,EAAI,EAAGD,EAAI9B,KAAK4D,SAAW,EAAG7B,GAAKuG,GACtCxG,EAAIC,GAAK,IAAM,GACnBsE,EAAIO,SAASvJ,EAAKyE,EAAIA,EAAGzE,EAAK0E,EAAIA,EAAGuG,EAAWA,GAKnDjC,EAAIkC,SACL,CAGA,IAAK,MAAMC,KAAYxI,KAAK4C,UAC3B4F,EAASpC,MAEX,CAEAsB,QAAAA,GACC,MAAMrB,EAAMrG,KAAKsG,KAAKC,QACtBF,EAAIoC,YAAc1L,EAAaQ,UAC/B8I,EAAIqC,UAAY1I,KAAKkC,SAAW,GAAM,EAEtC,IAAK,IAAIsD,EAAI,EAAGA,EAAItG,EAAYC,SAAUqG,IAAK,CAC9C,MAAMmD,EAAMnD,EAAIxF,KAAK4D,SACrByC,EAAIG,YACJH,EAAIuC,OAAOD,EAAK,GAChBtC,EAAIwC,OAAOF,EAAK3I,KAAK2D,WAAWqB,QAChCqB,EAAIyC,SACJzC,EAAIG,YACJH,EAAIuC,OAAO,EAAGD,GACdtC,EAAIwC,OAAO7I,KAAK2D,WAAWoB,MAAO4D,GAClCtC,EAAIyC,QACL,CACD,CAEAC,cAAAA,GAEC/I,KAAKiB,MAAMhE,MAAQ+C,KAAKiB,MAAMhE,MAAM+L,KAAK7D,IAAO,CAC/CrD,EAAGoC,KAAK+E,MAAM9D,EAAQrD,EAAI9B,KAAK4D,UAAY5D,KAAK4D,SAChD7B,EAAGmC,KAAK+E,MAAM9D,EAAQpD,EAAI/B,KAAK4D,UAAY5D,KAAK4D,aAG7C5D,KAAKiB,MAAM5D,OACd2C,KAAKiB,MAAM5D,KAAO,CACjByE,EAAGoC,KAAK+E,MAAMjJ,KAAKiB,MAAM5D,KAAKyE,EAAI9B,KAAK4D,UAAY5D,KAAK4D,SACxD7B,EAAGmC,KAAK+E,MAAMjJ,KAAKiB,MAAM5D,KAAK0E,EAAI/B,KAAK4D,UAAY5D,KAAK4D,WAK1D5D,KAAKkJ,cACN,CAEAA,YAAAA,GACC,MAAMC,EAAOnJ,KAAK2D,WAAWoB,MAAQ/E,KAAK4D,SACpCwF,EAAOpJ,KAAK2D,WAAWqB,OAAShF,KAAK4D,SAG3C5D,KAAKiB,MAAMhE,MAAQ+C,KAAKiB,MAAMhE,MAAM+L,KAAK7D,IAAO,CAC/CrD,EAAGoC,KAAKmF,IAAI,EAAGnF,KAAKoF,IAAInE,EAAQrD,EAAGqH,IACnCpH,EAAGmC,KAAKmF,IAAI,EAAGnF,KAAKoF,IAAInE,EAAQpD,EAAGqH,QAIhCpJ,KAAKiB,MAAM5D,OACd2C,KAAKiB,MAAM5D,KAAO,CACjByE,EAAGoC,KAAKmF,IAAI,EAAGnF,KAAKoF,IAAItJ,KAAKiB,MAAM5D,KAAKyE,EAAGqH,IAC3CpH,EAAGmC,KAAKmF,IAAI,EAAGnF,KAAKoF,IAAItJ,KAAKiB,MAAM5D,KAAK0E,EAAGqH,KAG9C,CAEApF,mBAAAA,GACC,CAGDuF,OAAAA,GAAW,IAADC,EAAAC,EAELzJ,KAAKyD,kBACRkB,SAAS+E,oBAAoB,UAAW1J,KAAKyD,iBAC7CzD,KAAKyD,gBAAkB,MAIxBzD,KAAKiB,MAAQ,CACZhE,MAAO,GACPI,KAAM,KACNmF,UAAW,CAAEV,EAAG,EAAGC,EAAG,GACtBU,cAAe,CAAEX,EAAG,EAAGC,EAAG,GAC1BW,MAAO,EACPjF,UAAU,EACVkF,WAAY,GAIb3C,KAAK4C,UAAY,GAGJ,QAAT4G,EAAAxJ,KAAKsG,YAAI,IAAAkD,GAATA,EAAWjD,SAAWvG,KAAK2D,YAC9B3D,KAAKsG,KAAKC,QAAQkB,UACjB,EACA,EACAzH,KAAK2D,WAAWoB,MAChB/E,KAAK2D,WAAWqB,QAKL,QAAbyE,EAAIzJ,KAAKsG,YAAI,IAAAmD,GAATA,EAAWE,mBACdC,qBAAqB5J,KAAKsG,KAAKqD,kBAC/B3J,KAAKsG,KAAKqD,iBAAmB,KAE/B,E,aCzbD,MAuRA,EAvRkBE,KACjB,MAAMC,GAAeC,EAAAA,EAAAA,QAAO,MACtBC,GAAYD,EAAAA,EAAAA,QAAO,MACnBE,GAAkBF,EAAAA,EAAAA,QAAO,MACzBG,GAAmBH,EAAAA,EAAAA,QAAO,OACzBI,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtC3H,EAAO4H,IAAYD,EAAAA,EAAAA,UAAS,IAC5B1M,EAAW4M,IAAgBF,EAAAA,EAAAA,UACjCpH,OAAOC,SAASC,aAAaC,QAAQ,oBAAsB,IAErDO,EAAY6G,IAAiBH,EAAAA,EAAAA,UAAS,CAAEtF,MAAO,EAAGC,OAAQ,KAC1D9C,EAAUuI,IAAeJ,EAAAA,EAAAA,WAAS,GACnCK,GAAgBX,EAAAA,EAAAA,QAAO,CAAEjI,EAAG,EAAGC,EAAG,EAAGgF,KAAM,IAE3C4D,GAAeC,EAAAA,EAAAA,cAAY,KAC5BV,EAAiBW,SACpBC,aAAaZ,EAAiBW,SAG/BX,EAAiBW,QAAUE,YAAW,KACrC,GAAIjB,EAAae,QAChB,IACC,MAAMG,EAAYlB,EAAae,SACzB,MAAE9F,EAAK,OAAEC,GAAWgG,EAAUC,wBAC9BC,EH+CkBC,EAACC,EAAgBC,KAC7C,MAAM,YAAEzN,EAAW,YAAEC,GAAgBd,GAC/B,SAAEoC,GAAaD,EAGfoM,EAAsBpH,KAAKoF,IAChCpF,KAAKC,MAAMiH,EAAiBjM,GAC5B+E,KAAKC,MAAMkH,EAAkBlM,IAIxByE,EAAWM,KAAKmF,IACrBzL,EACAsG,KAAKoF,IAAIgC,EAAqBzN,IAI/B,MAAO,CACNkH,MAAOnB,EAAWzE,EAClB6F,OAAQpB,EAAWzE,EACnByE,SAAUA,EACV,EGpEmBuH,CAAcpG,EAAOC,GAIpCkG,EAAQnG,QAAUpB,EAAWoB,OAC7BmG,EAAQlG,SAAWrB,EAAWqB,SAE9BwF,EAAcU,GACdT,EAAY1F,GAAS9F,GAGjB+K,EAAUa,UACbb,EAAUa,QAAQ9F,MAAQmG,EAAQnG,MAClCiF,EAAUa,QAAQ7F,OAASkG,EAAQlG,QAIhCiF,EAAgBY,UACnBZ,EAAgBY,QAAQlH,WAAauH,EACrCjB,EAAgBY,QAAQ9B,kBAG3B,CAAE,MAAO3H,GACRF,QAAQE,MAAM,uBAAwBA,EACvC,CACD,GACE,IAAI,GACL,CAACuC,KAEJ4H,EAAAA,EAAAA,YAAU,KAGT,IAAIC,EAFJb,IAGA,IACCa,EAAiB,IAAIC,gBAAgB7D,IAEpC,MAAM8D,EAAQ9D,EAAQ,GAClB8D,GAASA,EAAMC,aAClBhB,GACD,IAGGb,EAAae,SAChBW,EAAeI,QAAQ9B,EAAae,QAEtC,CAAE,MAAOzJ,GACRF,QAAQG,KAAK,wBAAyBD,EACvC,CAKA,OAHAyK,OAAOjH,iBAAiB,SAAU+F,GAClCkB,OAAOjH,iBAAiB,oBAAqB+F,GAEtC,KACFT,EAAiBW,SACpBC,aAAaZ,EAAiBW,SAE3BW,GACHA,EAAeM,aAEhBD,OAAOnC,oBAAoB,SAAUiB,GACrCkB,OAAOnC,oBAAoB,oBAAqBiB,EAAa,CAC7D,GACC,CAACA,KAEJY,EAAAA,EAAAA,YAAU,KACT,GACCvB,EAAUa,SACVf,EAAae,SACblH,EAAWoB,OACXpB,EAAWqB,OACV,CACD,MAAM+G,EAAS/B,EAAUa,QACnBxE,EAAM0F,EAAOC,WAAW,MAG9BD,EAAOhH,MAAQpB,EAAWoB,MAC1BgH,EAAO/G,OAASrB,EAAWqB,OAG3B,MAAMsB,EAAO,IAAItE,EAAWE,GAU5B,IAAIyH,EATJrD,EAAKA,KAAO,CAAEC,QAASF,EAAK0F,UAC5BzF,EAAK5C,OAAOC,GACZsG,EAAgBY,QAAUvE,EAG1ByF,EAAOE,aAAa,WAAY,KAChCF,EAAOG,QAIP,MAAMC,EAAUpF,IACVT,EAAKrF,MAAMxD,WACf6I,EAAKQ,OAAOC,GACZuD,EAAShE,EAAKrF,MAAMyB,OAChB4D,EAAKrF,MAAMxD,WACd2M,GAAc,GACV9D,EAAKrF,MAAMyB,MAAQ/E,IACtB4M,EAAajE,EAAKrF,MAAMyB,OACxBS,aAAamE,QAAQ,iBAAkBhB,EAAKrF,MAAMyB,SAGpDiH,EAAmBkC,OAAOO,sBAAsBD,GACjD,EAKD,OAHAA,EAAO,GAGA,KACNN,OAAOjC,qBAAqBD,GACxBrD,EAAKiD,SACRjD,EAAKiD,UAENU,EAAgBY,QAAU,IAAI,CAEhC,IACE,CAAClH,EAAYzB,EAAUvE,IAE1B,MAAM0O,GAAgBzB,EAAAA,EAAAA,cAAY,KAC7BX,EAAgBY,UACnBZ,EAAgBY,QAAQ/G,iBACxBsG,GAAc,GACdE,EAAS,GACLN,EAAUa,SACbb,EAAUa,QAAQqB,QAEpB,GACE,IA6CH,OACCI,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAAAC,UACjBF,EAAAA,EAAAA,KAAA,OAAKG,IAAK3C,EAAc4C,UAAU,aAAYF,UAC7CG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iBAAgBF,SAAA,EAC9BG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeF,SAAA,EAC7BG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,QAAOF,SAAA,EACrBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,WACNF,EAAAA,EAAAA,KAAA,QAAAE,SAAOI,OAAOlK,GAAOmK,SAAS,EAAG,WAElCF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYF,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,UACNF,EAAAA,EAAAA,KAAA,QAAAE,SAAOI,OAAOjP,GAAWkP,SAAS,EAAG,UAErCnK,EAAQ,GAAKA,GAAS/E,IACtBgP,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeF,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAK/I,IAAKC,EAAUsJ,IAAI,aACxBR,EAAAA,EAAAA,KAAA,OAAKI,UAAU,cAAaF,SAAC,qBAIhCF,EAAAA,EAAAA,KAAA,UACCG,IAAKzC,EACL0C,UAAU,cACVK,aAlEqBC,IACzB,MAAMC,EAAQD,EAAEE,QAAQ,GACxBxC,EAAcG,QAAU,CACvB/I,EAAGmL,EAAME,QACTpL,EAAGkL,EAAMG,QACTrG,KAAMsG,KAAK5L,MACX,EA6DG6L,WA1DmBN,IACvB,MAAMC,EAAQD,EAAEO,eAAe,GACzBC,EAASP,EAAME,QAAUzC,EAAcG,QAAQ/I,EAC/C2L,EAASR,EAAMG,QAAU1C,EAAcG,QAAQ9I,EAGrD,GAFkBsL,KAAK5L,MAAQiJ,EAAcG,QAAQ9D,KAErC7H,EAAYwO,eAAe3G,KAAM,CAEhD,GADiB7C,KAAKyJ,KAAKH,EAASA,EAASC,EAASA,GACvCvO,EAAYwO,eAAeE,SAAU,CACnD,MAAMnI,EAAQvB,KAAK2J,MAAMJ,EAAQD,GAC3BhL,EAAY0B,KAAK+E,MAAMxD,GAASvB,KAAKwB,GAAK,IAEhD,GAAIuE,EAAgBY,QACnB,QAASrI,EAAY,GAAK,GACzB,KAAK,EACJyH,EAAgBY,QAAQiD,aAAa,SACrC,MACD,KAAK,EACJ7D,EAAgBY,QAAQiD,aAAa,QACrC,MACD,KAAK,EACJ7D,EAAgBY,QAAQiD,aAAa,QACrC,MACD,KAAK,EACJ7D,EAAgBY,QAAQiD,aAAa,MAMzC,CACD,KA6BI3D,IACAmC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWF,UACzBG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBF,SAAA,EACjCG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBF,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAK/I,IAAKC,EAAUsJ,IAAI,UAAUJ,UAAU,mBAC5CJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAEhBJ,EAAAA,EAAAA,KAAA,MAAI,YAAU,YAAWE,SAAC,eAC1BF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAeF,SAC5B9J,IAAU/E,GAAa+E,EAAQ,GAC/BiK,EAAAA,EAAAA,MAAAoB,EAAAA,SAAA,CAAAvB,SAAA,EACCG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcF,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,OAAMF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYF,SAAC,iBAC7BF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,OAAMF,SAAC,eAExBG,EAAAA,EAAAA,MAAA,KAAGD,UAAU,cAAaF,SAAA,CAAC,UAClBI,OAAOlK,GAAOmK,SAAS,EAAG,SAEnCP,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,4BAGjCG,EAAAA,EAAAA,MAAAoB,EAAAA,SAAA,CAAAvB,SAAA,EACCG,EAAAA,EAAAA,MAAA,KAAGD,UAAU,cAAaF,SAAA,CAAC,UAClBI,OAAOlK,GAAOmK,SAAS,EAAG,SAEnCF,EAAAA,EAAAA,MAAA,KAAGD,UAAU,mBAAkBF,SAAA,CAAC,SACxBI,OAAOjP,GAAWkP,SAAS,EAAG,SAEtCP,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SACnB,IAAV9J,EACE,iBACAA,EAAQ,EACP,qBACAA,EAAQ,GACP,kBACAA,EAAQ/E,EACP,gBACA,qBAKV2O,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oBAAmBF,UACjCG,EAAAA,EAAAA,MAAA,UAAQqB,QAAS3B,EAAeK,UAAU,iBAAgBF,SAAA,EACzDF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,WAAUF,SAAC,gBAC3BF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,WAAUF,SAAC,2BAQf,C","sources":["components/Tools/snake/constants.js","components/Tools/snake/sounds.js","components/Tools/snake/snake.js","components/Tools/snake/index.js"],"sourcesContent":["// Theme configuration\nexport const THEME = {\n\tcolors: {\n\t\tbackground: \"rgba(10, 10, 15, 0.8)\", // Darker, more opaque background\n\t\tsnake: {\n\t\t\tgradient: [\"#7AA2F7\", \"#7DCFFF\", \"#2AC3DE\"], // Cool blue gradient\n\t\t\tglow: \"#7AA2F7\", // Matching glow color\n\t\t},\n\t\tsnakeHead: {\n\t\t\tgradient: [\"#BB9AF7\", \"#9D7CD8\"], // Purple gradient\n\t\t\tglow: \"#BB9AF7\", // Matching glow color\n\t\t},\n\t\tfood: {\n\t\t\tgradient: [\"#F7768E\", \"#FF9E64\"], // Warm gradient\n\t\t\tglow: \"#F7768E\", // Matching glow color\n\t\t},\n\t\tborder: \"#24283B\", // Subtle border\n\t\tgridLines: \"rgba(255, 255, 255, 0.05)\", // Subtle grid lines\n\t\ttext: \"#A9B1D6\", // Soft text color\n\t\tgameOver: \"#F7768E\", // Warm red for game over\n\t\tscoreBackground: \"rgba(26, 27, 38, 0.9)\", // Dark score background\n\t\thighScore: \"#9ECE6A\", // Green for high score\n\t},\n\n\tdimensions: {\n\t\tminTileSize: 20, // Minimum size for each grid cell\n\t\tmaxTileSize: 32, // Maximum size for each grid cell\n\t\tborderRadius: 4, // Rounded corners for tiles\n\t\tgridLineWidth: 1,\n\t\tshadowBlur: 30,\n\t\tglowRadius: 40,\n\t\tinnerShadowSize: 10,\n\t},\n\n\tanimations: {\n\t\tsnakeSpeed: {\n\t\t\tmobile: 100,\n\t\t\tdesktop: 80,\n\t\t},\n\t\tfadeSpeed: 400, // Smooth fade transitions\n\t\tgrowthFactor: 1.15, // More pronounced growth\n\t\tfoodPulseSpeed: 1800, // Slower pulse for food\n\t\tfoodPulseScale: 1.18, // Larger pulse scale\n\t\tsnakeGlowIntensity: 0.8, // Increased glow intensity\n\t\tshadowPulseSpeed: 200, // Speed of shadow pulse\n\t\tparticleCount: 10,\n\t\tparticleLifetime: 1000,\n\t\tparticleGravity: 0.1,\n\t\tparticleSpeed: 2,\n\t\tparticleSize: 0.5,\n\t},\n};\n\n// Responsive configuration\nexport const RESPONSIVE_CONFIG = {\n\tmobileBreakpoint: 768, // Width threshold for mobile devices\n\ttouchMinDistance: 30, // Minimum swipe distance to trigger direction change\n\ttouchMaxTime: 300, // Maximum time for a swipe gesture\n\tresizeDebounce: 250, // Debounce time for resize events\n};\n\n// Game configuration\nexport const GAME_CONFIG = {\n\tgridSize: 20, // Number of cells in both width and height\n\tinitialSnakeLength: 3,\n\tgrowthRate: 1,\n\tmaxHighScores: 5,\n\tcontrols: {\n\t\tup: [\"ArrowUp\", \"w\", \"W\"],\n\t\tdown: [\"ArrowDown\", \"s\", \"S\"],\n\t\tleft: [\"ArrowLeft\", \"a\", \"A\"],\n\t\tright: [\"ArrowRight\", \"d\", \"D\"],\n\t\tpause: [\"Space\", \"p\", \"P\"],\n\t\trestart: [\"r\", \"R\"],\n\t},\n};\n\n// Helper functions\nexport const getCanvasSize = (containerWidth, containerHeight) => {\n\tconst { minTileSize, maxTileSize } = THEME.dimensions;\n\tconst { gridSize } = GAME_CONFIG;\n\n\t// Calculate the maximum possible cell size that fits in both dimensions\n\tconst maxPossibleCellSize = Math.min(\n\t\tMath.floor(containerWidth / gridSize),\n\t\tMath.floor(containerHeight / gridSize),\n\t);\n\n\t// Clamp the cell size between min and max\n\tconst cellSize = Math.max(\n\t\tminTileSize,\n\t\tMath.min(maxPossibleCellSize, maxTileSize),\n\t);\n\n\t// Calculate the final canvas size to ensure perfect squares\n\treturn {\n\t\twidth: cellSize * gridSize,\n\t\theight: cellSize * gridSize,\n\t\tcellSize: cellSize,\n\t};\n};\n\nexport const getCellSize = (canvasSize) => {\n\treturn canvasSize.cellSize;\n};\n","import * as Tone from \"tone\";\n\nclass SoundManager {\n\tconstructor() {\n\t\t// Initialize synths\n\t\tthis.foodSynth = new Tone.Synth({\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.01,\n\t\t\t\tdecay: 0.1,\n\t\t\t\tsustain: 0,\n\t\t\t\trelease: 0.1,\n\t\t\t},\n\t\t}).toDestination();\n\n\t\tthis.gameOverSynth = new Tone.PolySynth(Tone.Synth, {\n\t\t\toscillator: {\n\t\t\t\ttype: \"triangle\",\n\t\t\t},\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.01,\n\t\t\t\tdecay: 0.3,\n\t\t\t\tsustain: 0,\n\t\t\t\trelease: 0.1,\n\t\t\t},\n\t\t}).toDestination();\n\n\t\tthis.moveSynth = new Tone.Synth({\n\t\t\toscillator: {\n\t\t\t\ttype: \"square\",\n\t\t\t},\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.01,\n\t\t\t\tdecay: 0.05,\n\t\t\t\tsustain: 0,\n\t\t\t\trelease: 0.05,\n\t\t\t},\n\t\t\tvolume: -20,\n\t\t}).toDestination();\n\n\t\t// Initialize effects\n\t\tthis.feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n\t\tthis.gameOverSynth.connect(this.feedbackDelay);\n\t}\n\n\tasync initialize() {\n\t\t// Only initialize if context is not running\n\t\tif (Tone.context.state !== \"running\") {\n\t\t\ttry {\n\t\t\t\tawait Tone.start();\n\t\t\t\tconsole.log(\"Audio context started\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(\"Could not start audio context:\", error);\n\t\t\t}\n\t\t}\n\t}\n\n\tplayFoodCollect() {\n\t\tthis.foodSynth.triggerAttackRelease(\"C5\", \"16n\");\n\t}\n\n\tplayGameOver() {\n\t\t// Play a descending pattern\n\t\tconst now = Tone.now();\n\t\tthis.gameOverSynth.triggerAttackRelease(\n\t\t\t[\"C4\", \"G3\", \"E3\", \"C3\"],\n\t\t\t\"8n\",\n\t\t\tnow,\n\t\t);\n\t}\n\n\tplayMove() {\n\t\tthis.moveSynth.triggerAttackRelease(\"G4\", \"32n\");\n\t}\n}\n\n// Create and export a singleton instance\nconst soundManager = new SoundManager();\nexport { soundManager };\n","// External dependencies\nimport { Scene } from \"phaser\";\nimport profile1 from \"../../../assets/images/profile1-nbg.png\";\nimport { GAME_CONFIG, THEME } from \"./constants\";\nimport { soundManager as sound } from \"./sounds\";\n\nconst isPositionEqual = (pos1, pos2) => {\n\treturn pos1.x === pos2.x && pos1.y === pos2.y;\n};\n\nexport class SnakeScene extends Scene {\n\tconstructor(isMobile = false) {\n\t\tsuper({ key: \"SnakeScene\" });\n\t\tthis.state = {\n\t\t\tsnake: [],\n\t\t\tfood: null,\n\t\t\tdirection: { x: 0, y: 0 },\n\t\t\tnextDirection: { x: 0, y: 0 },\n\t\t\tscore: 0,\n\t\t\tgameOver: false,\n\t\t\tlastUpdate: 0,\n\t\t};\n\t\tthis.particles = [];\n\t\tthis.currentHue = 0;\n\t\tthis.snakeHue = 180; // Starting color for snake\n\t\tthis.foodHue = 0; // Starting color for food\n\t\tthis.isMobile = isMobile;\n\t\tthis.gameSpeed = isMobile\n\t\t\t? THEME.animations.snakeSpeed.mobile\n\t\t\t: THEME.animations.snakeSpeed.desktop;\n\t\tthis.highScore =\n\t\t\tNumber.parseInt(localStorage.getItem(\"snakeHighScore\")) || 0;\n\t\tthis.avatar = new Image();\n\t\tthis.avatar.src = profile1;\n\t\tthis.boundKeyHandler = null;\n\t}\n\n\tasync create(canvasSize) {\n\t\tthis.canvasSize = canvasSize;\n\t\tthis.cellSize = canvasSize.cellSize; // Use the precalculated cell size\n\t\tawait sound.initialize();\n\t\tthis.initializeGame();\n\t\tthis.setupInput();\n\t\tthis.setupEventListeners();\n\t}\n\n\tinitializeGame() {\n\t\tconst centerX = Math.floor(GAME_CONFIG.gridSize / 2) * this.cellSize;\n\t\tconst centerY = Math.floor(GAME_CONFIG.gridSize / 2) * this.cellSize;\n\n\t\tthis.state.snake = [{ x: centerX, y: centerY }];\n\t\tthis.state.direction = { x: this.cellSize, y: 0 };\n\t\tthis.state.nextDirection = { x: this.cellSize, y: 0 };\n\t\tthis.spawnFood();\n\t\tthis.state.score = 0;\n\t\tthis.state.gameOver = false;\n\t}\n\n\tsetupInput() {\n\t\tthis.boundKeyHandler = (event) => {\n\t\t\tthis.handleKeyPress(event.code);\n\t\t\tif (\n\t\t\t\t[\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(event.code)\n\t\t\t) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"keydown\", this.boundKeyHandler);\n\t}\n\n\thandleKeyPress(key) {\n\t\tif (this.state.gameOver && (key === \"Space\" || key === \"Enter\")) {\n\t\t\tthis.initializeGame();\n\t\t\treturn;\n\t\t}\n\n\t\tconst { direction } = this.state;\n\t\tconst { cellSize } = this;\n\n\t\tswitch (key) {\n\t\t\tcase \"ArrowUp\":\n\t\t\t\tif (direction.y === 0) {\n\t\t\t\t\tthis.state.nextDirection = { x: 0, y: -cellSize };\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowDown\":\n\t\t\t\tif (direction.y === 0) {\n\t\t\t\t\tthis.state.nextDirection = { x: 0, y: cellSize };\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowLeft\":\n\t\t\t\tif (direction.x === 0) {\n\t\t\t\t\tthis.state.nextDirection = { x: -cellSize, y: 0 };\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowRight\":\n\t\t\t\tif (direction.x === 0) {\n\t\t\t\t\tthis.state.nextDirection = { x: cellSize, y: 0 };\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Space\":\n\t\t\tcase \"Enter\":\n\t\t\t\tif (this.state.gameOver) {\n\t\t\t\t\tthis.initializeGame();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tgenerateFoodPosition() {\n\t\tconst x =\n\t\t\tMath.floor(Math.random() * (this.canvasSize.width / this.cellSize)) *\n\t\t\tthis.cellSize;\n\t\tconst y =\n\t\t\tMath.floor(Math.random() * (this.canvasSize.height / this.cellSize)) *\n\t\t\tthis.cellSize;\n\t\treturn { x, y };\n\t}\n\n\tisValidFoodPosition(food) {\n\t\treturn !this.state.snake.some((segment) => this.isCollision(segment, food));\n\t}\n\n\tspawnFood() {\n\t\tlet newFood;\n\t\tdo {\n\t\t\tnewFood = this.generateFoodPosition();\n\t\t} while (!this.isValidFoodPosition(newFood));\n\n\t\tthis.state.food = newFood;\n\t}\n\n\tisCollision(pos1, pos2) {\n\t\t// Replace custom collision check with isPositionEqual\n\t\treturn isPositionEqual(pos1, pos2);\n\t}\n\n\tcreateParticles() {\n\t\tconst { food } = this.state;\n\t\tconst particleCount = 10;\n\t\tconst baseHue = this.foodHue; // Use current food hue for particles\n\n\t\tfor (let i = 0; i < particleCount; i++) {\n\t\t\tconst angle = (Math.PI * 2 * i) / particleCount;\n\t\t\tconst speed = 2 + Math.random() * 2;\n\t\t\tconst size = 2 + Math.random() * 3;\n\n\t\t\tthis.particles.push({\n\t\t\t\tx: food.x + this.cellSize / 2,\n\t\t\t\ty: food.y + this.cellSize / 2,\n\t\t\t\tvx: Math.cos(angle) * speed,\n\t\t\t\tvy: Math.sin(angle) * speed,\n\t\t\t\tsize,\n\t\t\t\tlife: 1,\n\t\t\t\thue: (baseHue + Math.random() * 30) % 360,\n\t\t\t\tdraw: function () {\n\t\t\t\t\tif (this.life <= 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst ctx = this.game.context;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.fillStyle = `hsla(${this.hue}, 70%, 50%, ${this.life})`;\n\t\t\t\t\tctx.shadowColor = `hsla(${this.hue}, 80%, 60%, ${this.life})`;\n\t\t\t\t\tctx.shadowBlur = 5;\n\t\t\t\t\tctx.fillRect(this.x, this.y, this.size, this.size);\n\t\t\t\t\tctx.shadowBlur = 0;\n\n\t\t\t\t\t// Update position and life\n\t\t\t\t\tthis.x += this.vx;\n\t\t\t\t\tthis.y += this.vy;\n\t\t\t\t\tthis.life -= 0.05;\n\t\t\t\t}.bind(this),\n\t\t\t});\n\t\t}\n\t}\n\n\tupdate(time) {\n\t\tif (this.state.gameOver) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update colors\n\t\tthis.snakeHue = (this.snakeHue + 0.5) % 360;\n\t\tthis.foodHue = (this.foodHue + 1) % 360;\n\n\t\t// Check if enough time has passed since last update\n\t\tif (time - this.state.lastUpdate < this.gameSpeed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.lastUpdate = time;\n\t\tthis.moveSnake();\n\t\tif (this.checkCollisions()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.draw();\n\t\tthis.updateParticles();\n\t}\n\n\tcheckCollisions() {\n\t\tconst { snake } = this.state;\n\t\tconst head = snake[0];\n\n\t\t// Check self collision\n\t\tfor (let i = 1; i < snake.length; i++) {\n\t\t\tif (isPositionEqual(head, snake[i])) {\n\t\t\t\tthis.state.gameOver = true;\n\t\t\t\tsound.playGameOver();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tmoveSnake() {\n\t\tconst { snake, nextDirection, food } = this.state;\n\t\tconst head = { ...snake[0] };\n\n\t\tthis.state.direction = nextDirection;\n\t\thead.x += nextDirection.x;\n\t\thead.y += nextDirection.y;\n\n\t\t// Wrap around walls\n\t\tconst { width, height } = this.canvasSize;\n\n\t\tif (head.x >= width) {\n\t\t\thead.x = 0;\n\t\t}\n\t\tif (head.x < 0) {\n\t\t\thead.x = width - this.cellSize;\n\t\t}\n\t\tif (head.y >= height) {\n\t\t\thead.y = 0;\n\t\t}\n\t\tif (head.y < 0) {\n\t\t\thead.y = height - this.cellSize;\n\t\t}\n\n\t\tsnake.unshift(head);\n\n\t\t// Check food collision using isPositionEqual\n\t\tif (isPositionEqual(head, food)) {\n\t\t\t// Play food collection sound\n\t\t\tsound.playFoodCollect();\n\n\t\t\t// Increment score\n\t\t\tthis.state.score++;\n\n\t\t\t// Create particles\n\t\t\tthis.createParticles();\n\n\t\t\t// Spawn new food\n\t\t\tthis.spawnFood();\n\n\t\t\t// Update high score\n\t\t\tif (this.state.score > this.highScore) {\n\t\t\t\tthis.highScore = this.state.score;\n\t\t\t\tlocalStorage.setItem(\"snakeHighScore\", this.state.score);\n\t\t\t}\n\n\t\t\t// Don't remove tail to grow snake\n\t\t} else {\n\t\t\t// Remove tail if no food was eaten\n\t\t\tsnake.pop();\n\t\t}\n\t}\n\n\tupdateParticles() {\n\t\tfor (let i = this.particles.length - 1; i >= 0; i--) {\n\t\t\tthis.particles[i].draw();\n\t\t\tif (this.particles[i].life <= 0) {\n\t\t\t\tthis.particles.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tdraw() {\n\t\tconst { snake, food } = this.state;\n\t\tconst ctx = this.game.context;\n\n\t\t// Clear canvas\n\t\tctx.clearRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n\n\t\t// Draw grid\n\t\tthis.drawGrid();\n\n\t\t// Draw snake with color cycling\n\t\tfor (const [index, segment] of snake.entries()) {\n\t\t\tconst isHead = index === 0;\n\t\t\tctx.beginPath();\n\n\t\t\t// Create gradient based on position in snake\n\t\t\tconst segmentHue = (this.snakeHue + index * 5) % 360;\n\t\t\tconst baseColor = `hsl(${segmentHue}, 70%, ${isHead ? 60 : 50}%)`;\n\t\t\tconst glowColor = `hsl(${segmentHue}, 80%, 60%)`;\n\n\t\t\tctx.fillStyle = baseColor;\n\t\t\tctx.shadowColor = glowColor;\n\t\t\tctx.shadowBlur = isHead ? 15 : 10;\n\t\t\tctx.fillRect(segment.x, segment.y, this.cellSize - 1, this.cellSize - 1);\n\t\t}\n\t\tctx.shadowBlur = 0;\n\n\t\t// Draw food if it exists\n\t\tif (food) {\n\t\t\tctx.save();\n\n\t\t\t// Create color overlay\n\t\t\tconst foodColor = `hsl(${this.foodHue}, 70%, 50%)`;\n\t\t\tconst foodGlow = `hsl(${this.foodHue}, 80%, 60%)`;\n\n\t\t\t// Add glow effect\n\t\t\tctx.shadowColor = foodGlow;\n\t\t\tctx.shadowBlur = 15;\n\n\t\t\t// Draw the avatar image\n\t\t\tctx.drawImage(\n\t\t\t\tthis.avatar,\n\t\t\t\tfood.x,\n\t\t\t\tfood.y,\n\t\t\t\tthis.cellSize - 1,\n\t\t\t\tthis.cellSize - 1,\n\t\t\t);\n\n\t\t\t// Add colored overlay\n\t\t\tctx.globalCompositeOperation = \"overlay\";\n\t\t\tctx.fillStyle = foodColor;\n\t\t\tctx.fillRect(food.x, food.y, this.cellSize - 1, this.cellSize - 1);\n\n\t\t\t// Add pixelation effect\n\t\t\tctx.globalCompositeOperation = \"source-over\";\n\t\t\tctx.fillStyle = \"rgba(255, 255, 255, 0.1)\";\n\t\t\tconst pixelSize = 2;\n\t\t\tfor (let x = 0; x < this.cellSize - 1; x += pixelSize) {\n\t\t\t\tfor (let y = 0; x < this.cellSize - 1; y += pixelSize) {\n\t\t\t\t\tif ((x + y) % 4 === 0) {\n\t\t\t\t\t\tctx.fillRect(food.x + x, food.y + y, pixelSize, pixelSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t}\n\n\t\t// Draw particles\n\t\tfor (const particle of this.particles) {\n\t\t\tparticle.draw();\n\t\t}\n\t}\n\n\tdrawGrid() {\n\t\tconst ctx = this.game.context;\n\t\tctx.strokeStyle = THEME.colors.gridLines;\n\t\tctx.lineWidth = this.isMobile ? 0.5 : 1;\n\n\t\tfor (let i = 0; i < GAME_CONFIG.gridSize; i++) {\n\t\t\tconst pos = i * this.cellSize;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(pos, 0);\n\t\t\tctx.lineTo(pos, this.canvasSize.height);\n\t\t\tctx.stroke();\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(0, pos);\n\t\t\tctx.lineTo(this.canvasSize.width, pos);\n\t\t\tctx.stroke();\n\t\t}\n\t}\n\n\tupdateGridSize() {\n\t\t// Recalculate positions based on new cell size\n\t\tthis.state.snake = this.state.snake.map((segment) => ({\n\t\t\tx: Math.round(segment.x / this.cellSize) * this.cellSize,\n\t\t\ty: Math.round(segment.y / this.cellSize) * this.cellSize,\n\t\t}));\n\n\t\tif (this.state.food) {\n\t\t\tthis.state.food = {\n\t\t\t\tx: Math.round(this.state.food.x / this.cellSize) * this.cellSize,\n\t\t\t\ty: Math.round(this.state.food.y / this.cellSize) * this.cellSize,\n\t\t\t};\n\t\t}\n\n\t\t// Ensure snake and food are within bounds\n\t\tthis.keepInBounds();\n\t}\n\n\tkeepInBounds() {\n\t\tconst maxX = this.canvasSize.width - this.cellSize;\n\t\tconst maxY = this.canvasSize.height - this.cellSize;\n\n\t\t// Adjust snake segments\n\t\tthis.state.snake = this.state.snake.map((segment) => ({\n\t\t\tx: Math.max(0, Math.min(segment.x, maxX)),\n\t\t\ty: Math.max(0, Math.min(segment.y, maxY)),\n\t\t}));\n\n\t\t// Adjust food if it exists\n\t\tif (this.state.food) {\n\t\t\tthis.state.food = {\n\t\t\t\tx: Math.max(0, Math.min(this.state.food.x, maxX)),\n\t\t\t\ty: Math.max(0, Math.min(this.state.food.y, maxY)),\n\t\t\t};\n\t\t}\n\t}\n\n\tsetupEventListeners() {\n\t\t// Removed keyboard listener setup\n\t}\n\n\tcleanup() {\n\t\t// Remove keyboard event listeners\n\t\tif (this.boundKeyHandler) {\n\t\t\tdocument.removeEventListener(\"keydown\", this.boundKeyHandler);\n\t\t\tthis.boundKeyHandler = null;\n\t\t}\n\n\t\t// Clear game state\n\t\tthis.state = {\n\t\t\tsnake: [],\n\t\t\tfood: null,\n\t\t\tdirection: { x: 0, y: 0 },\n\t\t\tnextDirection: { x: 0, y: 0 },\n\t\t\tscore: 0,\n\t\t\tgameOver: false,\n\t\t\tlastUpdate: 0,\n\t\t};\n\n\t\t// Clear particles\n\t\tthis.particles = [];\n\n\t\t// Clear canvas if it exists\n\t\tif (this.game?.context && this.canvasSize) {\n\t\t\tthis.game.context.clearRect(\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tthis.canvasSize.width,\n\t\t\t\tthis.canvasSize.height,\n\t\t\t);\n\t\t}\n\n\t\t// Stop any ongoing animations\n\t\tif (this.game?.animationFrameId) {\n\t\t\tcancelAnimationFrame(this.game.animationFrameId);\n\t\t\tthis.game.animationFrameId = null;\n\t\t}\n\t}\n}\n","import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport profile1 from \"../../../assets/images/profile1-nbg.png\";\nimport FullscreenWrapper from \"../FullscreenWrapper\";\nimport { GAME_CONFIG, RESPONSIVE_CONFIG, getCanvasSize } from \"./constants\";\nimport { SnakeScene } from \"./snake\";\nimport \"./snake.scss\";\n\nconst SnakeGame = () => {\n\tconst containerRef = useRef(null);\n\tconst canvasRef = useRef(null);\n\tconst gameInstanceRef = useRef(null);\n\tconst resizeTimeoutRef = useRef(null);\n\tconst [isGameOver, setIsGameOver] = useState(false);\n\tconst [score, setScore] = useState(0);\n\tconst [highScore, setHighScore] = useState(\n\t\tNumber.parseInt(localStorage.getItem(\"snakeHighScore\")) || 0,\n\t);\n\tconst [canvasSize, setCanvasSize] = useState({ width: 0, height: 0 });\n\tconst [isMobile, setIsMobile] = useState(false);\n\tconst touchStartRef = useRef({ x: 0, y: 0, time: 0 });\n\n\tconst handleResize = useCallback(() => {\n\t\tif (resizeTimeoutRef.current) {\n\t\t\tclearTimeout(resizeTimeoutRef.current);\n\t\t}\n\n\t\tresizeTimeoutRef.current = setTimeout(() => {\n\t\t\tif (containerRef.current) {\n\t\t\t\ttry {\n\t\t\t\t\tconst container = containerRef.current;\n\t\t\t\t\tconst { width, height } = container.getBoundingClientRect();\n\t\t\t\t\tconst newSize = getCanvasSize(width, height);\n\n\t\t\t\t\t// Only update if size actually changed\n\t\t\t\t\tif (\n\t\t\t\t\t\tnewSize.width !== canvasSize.width ||\n\t\t\t\t\t\tnewSize.height !== canvasSize.height\n\t\t\t\t\t) {\n\t\t\t\t\t\tsetCanvasSize(newSize);\n\t\t\t\t\t\tsetIsMobile(width <= RESPONSIVE_CONFIG.mobileBreakpoint);\n\n\t\t\t\t\t\t// Update canvas size\n\t\t\t\t\t\tif (canvasRef.current) {\n\t\t\t\t\t\t\tcanvasRef.current.width = newSize.width;\n\t\t\t\t\t\t\tcanvasRef.current.height = newSize.height;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update game instance\n\t\t\t\t\t\tif (gameInstanceRef.current) {\n\t\t\t\t\t\t\tgameInstanceRef.current.canvasSize = newSize;\n\t\t\t\t\t\t\tgameInstanceRef.current.updateGridSize();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(\"Error during resize:\", error);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 250);\n\t}, [canvasSize]);\n\n\tuseEffect(() => {\n\t\thandleResize();\n\n\t\tlet resizeObserver;\n\t\ttry {\n\t\t\tresizeObserver = new ResizeObserver((entries) => {\n\t\t\t\t// Avoid infinite loops by checking if size actually changed\n\t\t\t\tconst entry = entries[0];\n\t\t\t\tif (entry && entry.contentRect) {\n\t\t\t\t\thandleResize();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (containerRef.current) {\n\t\t\t\tresizeObserver.observe(containerRef.current);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn(\"ResizeObserver error:\", error);\n\t\t}\n\n\t\twindow.addEventListener(\"resize\", handleResize);\n\t\twindow.addEventListener(\"orientationchange\", handleResize);\n\n\t\treturn () => {\n\t\t\tif (resizeTimeoutRef.current) {\n\t\t\t\tclearTimeout(resizeTimeoutRef.current);\n\t\t\t}\n\t\t\tif (resizeObserver) {\n\t\t\t\tresizeObserver.disconnect();\n\t\t\t}\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\n\t\t\twindow.removeEventListener(\"orientationchange\", handleResize);\n\t\t};\n\t}, [handleResize]);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tcanvasRef.current &&\n\t\t\tcontainerRef.current &&\n\t\t\tcanvasSize.width &&\n\t\t\tcanvasSize.height\n\t\t) {\n\t\t\tconst canvas = canvasRef.current;\n\t\t\tconst ctx = canvas.getContext(\"2d\");\n\n\t\t\t// Set canvas size\n\t\t\tcanvas.width = canvasSize.width;\n\t\t\tcanvas.height = canvasSize.height;\n\n\t\t\t// Initialize game\n\t\t\tconst game = new SnakeScene(isMobile);\n\t\t\tgame.game = { context: ctx, canvas };\n\t\t\tgame.create(canvasSize);\n\t\t\tgameInstanceRef.current = game;\n\n\t\t\t// Focus the canvas for keyboard input\n\t\t\tcanvas.setAttribute(\"tabindex\", \"0\");\n\t\t\tcanvas.focus();\n\n\t\t\t// Animation loop\n\t\t\tlet animationFrameId;\n\t\t\tconst render = (time) => {\n\t\t\t\tif (!game.state.gameOver) {\n\t\t\t\t\tgame.update(time);\n\t\t\t\t\tsetScore(game.state.score);\n\t\t\t\t\tif (game.state.gameOver) {\n\t\t\t\t\t\tsetIsGameOver(true);\n\t\t\t\t\t\tif (game.state.score > highScore) {\n\t\t\t\t\t\t\tsetHighScore(game.state.score);\n\t\t\t\t\t\t\tlocalStorage.setItem(\"snakeHighScore\", game.state.score);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tanimationFrameId = window.requestAnimationFrame(render);\n\t\t\t\t}\n\t\t\t};\n\t\t\trender(0);\n\n\t\t\t// Cleanup\n\t\t\treturn () => {\n\t\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t\t\tif (game.cleanup) {\n\t\t\t\t\tgame.cleanup();\n\t\t\t\t}\n\t\t\t\tgameInstanceRef.current = null;\n\t\t\t};\n\t\t}\n\t}, [canvasSize, isMobile, highScore]);\n\n\tconst handleRestart = useCallback(() => {\n\t\tif (gameInstanceRef.current) {\n\t\t\tgameInstanceRef.current.initializeGame();\n\t\t\tsetIsGameOver(false);\n\t\t\tsetScore(0);\n\t\t\tif (canvasRef.current) {\n\t\t\t\tcanvasRef.current.focus();\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tconst handleTouchStart = (e) => {\n\t\tconst touch = e.touches[0];\n\t\ttouchStartRef.current = {\n\t\t\tx: touch.clientX,\n\t\t\ty: touch.clientY,\n\t\t\ttime: Date.now(),\n\t\t};\n\t};\n\n\tconst handleTouchEnd = (e) => {\n\t\tconst touch = e.changedTouches[0];\n\t\tconst deltaX = touch.clientX - touchStartRef.current.x;\n\t\tconst deltaY = touch.clientY - touchStartRef.current.y;\n\t\tconst deltaTime = Date.now() - touchStartRef.current.time;\n\n\t\tif (deltaTime < GAME_CONFIG.touchThreshold.time) {\n\t\t\tconst distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\t\t\tif (distance > GAME_CONFIG.touchThreshold.distance) {\n\t\t\t\tconst angle = Math.atan2(deltaY, deltaX);\n\t\t\t\tconst direction = Math.round(angle / (Math.PI / 2));\n\n\t\t\t\tif (gameInstanceRef.current) {\n\t\t\t\t\tswitch ((direction + 4) % 4) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tgameInstanceRef.current.setDirection(\"right\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tgameInstanceRef.current.setDirection(\"down\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tgameInstanceRef.current.setDirection(\"left\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tgameInstanceRef.current.setDirection(\"up\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<FullscreenWrapper>\n\t\t\t<div ref={containerRef} className=\"snake-tool\">\n\t\t\t\t<div className=\"game-container\">\n\t\t\t\t\t<div className=\"score-display\">\n\t\t\t\t\t\t<div className=\"score\">\n\t\t\t\t\t\t\t<span>Score</span>\n\t\t\t\t\t\t\t<span>{String(score).padStart(2, \"0\")}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"high-score\">\n\t\t\t\t\t\t\t<span>Best</span>\n\t\t\t\t\t\t\t<span>{String(highScore).padStart(2, \"0\")}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{score > 0 && score >= highScore && (\n\t\t\t\t\t\t\t<div className=\"profile-badge\">\n\t\t\t\t\t\t\t\t<img src={profile1} alt=\"Profile\" />\n\t\t\t\t\t\t\t\t<div className=\"badge-label\">New Best!</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<canvas\n\t\t\t\t\t\tref={canvasRef}\n\t\t\t\t\t\tclassName=\"game-canvas\"\n\t\t\t\t\t\tonTouchStart={handleTouchStart}\n\t\t\t\t\t\tonTouchEnd={handleTouchEnd}\n\t\t\t\t\t/>\n\t\t\t\t\t{isGameOver && (\n\t\t\t\t\t\t<div className=\"game-over\">\n\t\t\t\t\t\t\t<div className=\"game-over-content\">\n\t\t\t\t\t\t\t\t<div className=\"profile-container\">\n\t\t\t\t\t\t\t\t\t<img src={profile1} alt=\"Profile\" className=\"profile-image\" />\n\t\t\t\t\t\t\t\t\t<div className=\"pixel-overlay\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<h2 data-text=\"GAME OVER\">GAME OVER</h2>\n\t\t\t\t\t\t\t\t<div className=\"score-message\">\n\t\t\t\t\t\t\t\t\t{score === highScore && score > 0 ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"score-banner\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"star\">★</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"new-record\">NEW RECORD!</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"star\">★</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"score-value\">\n\t\t\t\t\t\t\t\t\t\t\t\tScore: {String(score).padStart(2, \"0\")}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"encouraging-text\">You're unstoppable!</p>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"score-value\">\n\t\t\t\t\t\t\t\t\t\t\t\tScore: {String(score).padStart(2, \"0\")}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"high-score-value\">\n\t\t\t\t\t\t\t\t\t\t\t\tBest: {String(highScore).padStart(2, \"0\")}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"encouraging-text\">\n\t\t\t\t\t\t\t\t\t\t\t\t{score === 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"Don't give up!\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: score < 5\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"You can do better!\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: score < 10\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"Getting better!\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: score < highScore\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"Almost there!\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"Great job!\"}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"game-over-buttons\">\n\t\t\t\t\t\t\t\t\t<button onClick={handleRestart} className=\"play-again-btn\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"btn-text\">PLAY AGAIN</span>\n\t\t\t\t\t\t\t\t\t\t<span className=\"btn-icon\">↺</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</FullscreenWrapper>\n\t);\n};\n\nexport default SnakeGame;\n"],"names":["THEME","background","snake","gradient","glow","snakeHead","food","border","gridLines","text","gameOver","scoreBackground","highScore","minTileSize","maxTileSize","borderRadius","gridLineWidth","shadowBlur","glowRadius","innerShadowSize","snakeSpeed","mobile","desktop","fadeSpeed","growthFactor","foodPulseSpeed","foodPulseScale","snakeGlowIntensity","shadowPulseSpeed","particleCount","particleLifetime","particleGravity","particleSpeed","particleSize","RESPONSIVE_CONFIG","GAME_CONFIG","gridSize","initialSnakeLength","growthRate","maxHighScores","controls","up","down","left","right","pause","restart","soundManager","constructor","this","foodSynth","Tone","oscillator","type","envelope","attack","decay","sustain","release","toDestination","gameOverSynth","moveSynth","volume","feedbackDelay","connect","initialize","state","console","log","error","warn","playFoodCollect","triggerAttackRelease","playGameOver","now","playMove","isPositionEqual","pos1","pos2","x","y","SnakeScene","Scene","isMobile","arguments","length","undefined","super","key","direction","nextDirection","score","lastUpdate","particles","currentHue","snakeHue","foodHue","gameSpeed","Number","parseInt","localStorage","getItem","avatar","Image","src","profile1","boundKeyHandler","create","canvasSize","cellSize","sound","initializeGame","setupInput","setupEventListeners","centerX","Math","floor","centerY","spawnFood","event","handleKeyPress","code","includes","preventDefault","document","addEventListener","generateFoodPosition","random","width","height","isValidFoodPosition","some","segment","isCollision","newFood","createParticles","baseHue","i","angle","PI","speed","size","push","vx","cos","vy","sin","life","hue","draw","ctx","game","context","beginPath","fillStyle","concat","shadowColor","fillRect","bind","update","time","moveSnake","checkCollisions","updateParticles","head","_objectSpread","unshift","setItem","pop","splice","clearRect","drawGrid","index","entries","isHead","segmentHue","baseColor","glowColor","save","foodColor","foodGlow","drawImage","globalCompositeOperation","pixelSize","restore","particle","strokeStyle","lineWidth","pos","moveTo","lineTo","stroke","updateGridSize","map","round","keepInBounds","maxX","maxY","max","min","cleanup","_this$game","_this$game2","removeEventListener","animationFrameId","cancelAnimationFrame","SnakeGame","containerRef","useRef","canvasRef","gameInstanceRef","resizeTimeoutRef","isGameOver","setIsGameOver","useState","setScore","setHighScore","setCanvasSize","setIsMobile","touchStartRef","handleResize","useCallback","current","clearTimeout","setTimeout","container","getBoundingClientRect","newSize","getCanvasSize","containerWidth","containerHeight","maxPossibleCellSize","useEffect","resizeObserver","ResizeObserver","entry","contentRect","observe","window","disconnect","canvas","getContext","setAttribute","focus","render","requestAnimationFrame","handleRestart","_jsx","FullscreenWrapper","children","ref","className","_jsxs","String","padStart","alt","onTouchStart","e","touch","touches","clientX","clientY","Date","onTouchEnd","changedTouches","deltaX","deltaY","touchThreshold","sqrt","distance","atan2","setDirection","_Fragment","onClick"],"sourceRoot":""}