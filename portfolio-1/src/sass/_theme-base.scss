@use "base";
@use "mixins" as *;
@use "sass:map";
@use "sass:color";
@use "theme-variables" as *;

// Root CSS variables for theme switch dimensions
:root {
  --track-width: 50px;
  --track-height: 26px;
  --thumb-size: 22px;
  --track-padding: #{$track-padding};
  --track-inner-space: calc(var(--track-width) - var(--thumb-size) - (2 * var(--track-padding)));
  --spacing: calc(var(--track-height) * #{$spacing-ratio});
}

// Generate variables for each screen size
@each $size, $dims in $screens {
  $track-width: map.get($dims, width);
  $track-height: map.get($dims, height);
  $thumb-size: map.get($dims, thumb);
  $track-inner-space: $track-width - $thumb-size - (2 * $track-padding);
  $spacing: $track-height * $spacing-ratio;

  #{$size} {
    --track-width: #{$track-width};
    --track-height: #{$track-height};
    --thumb-size: #{$thumb-size};
    --track-inner-space: #{$track-inner-space};
    --spacing: #{$spacing};
  }
}

// Theme styles mixin
@mixin theme-styles($theme, $bg-color, $text-color, $shadow-color, $vignette-color, $vignette-blend-mode) {
  --background-color: #{$bg-color};
  --text-color: #{$text-color};
  --text-color-muted: #{if($theme == 'light', var(--color-grey-dark-2), var(--color-grey-light-2))};
  --shadow-dark: #{if($theme == 'light', var(--shadow-light), var(--shadow-dark))};
  --profile-pic-bg-color: #{if($theme == 'light', var(--lightground-alt), var(--color-grey-dark-3))};
  --vignette-color: #{$vignette-color};
  --vignette-color-dark: #{color.adjust($vignette-color, $alpha: 0.4)};
  --vignette-blend-mode: #{$vignette-blend-mode};
  --vignette-opacity: #{if($theme == 'light', 0.8, 0.6)};
  
  --color-primary: #{if($theme == 'light', var(--color-sage), var(--color-sage-light))};
  --color-secondary: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  --color-accent: #{if($theme == 'light', var(--color-indigo), var(--color-indigo-light))};
  --color-hover: #{if($theme == 'light', var(--color-coral), var(--color-coral-light))};
  
  --component-bg: #{if($theme == 'light', var(--overlay-light), var(--overlay-dark))};
  --component-border: #{if($theme == 'light', var(--shadow-light), var(--shadow-dark))};
  
  &::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      #{color.adjust($shadow-color, $alpha: 0.02)} 0%,
      #{color.adjust($shadow-color, $alpha: 0.05)} 100%
    );
    pointer-events: none;
    z-index: -1;
  }

  @if $theme == 'light' {
    a, button {
      &:hover {
        color: var(--color-hover);
      }
    }

    .work__item,
    .project__item,
    .about__container {
      background-color: var(--lightground-alt);
      box-shadow: 0 2px 8px var(--shadow-light);
    }
  }
}

// Light theme
body.light-theme {
  @include theme-styles('light', var(--color-grey-light-1), var(--color-grey-dark-1), rgb(255, 255, 255), rgba(255, 255, 255, 0.3), soft-light);
  
  --navbar-bg-gradient: linear-gradient(
    to bottom,
    rgba(255, 255, 255, 0.3) 0%,
    transparent 100%
  );

  .theme-switch {
    background: rgba(0, 0, 0, 0.15);
  }
}

// Dark theme
.dark-theme {
  @include theme-styles('dark', var(--darkground-color), var(--color-grey-light-1), rgb(0, 0, 0), rgba(0, 0, 0, 0.3), screen);
}

// Global transitions
body {
  transition: 
    background-color $transition-duration $transition-timing,
    color $transition-duration $transition-timing,
    border-color $transition-duration $transition-timing,
    box-shadow $transition-duration $transition-timing;

  * {
    transition: 
      background-color $transition-duration $transition-timing,
      border-color $transition-duration $transition-timing,
      box-shadow $transition-duration $transition-timing,
      opacity $transition-duration $transition-timing;
  }
}

// Animations
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 0.5;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.2;
  }
}
