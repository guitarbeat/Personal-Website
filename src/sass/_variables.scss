/**
 * DEPRECATED: Legacy Variables Forwarding Module
 *
 * This file is now just a forwarding module that imports tokens.scss.
 * It will be completely removed in a future version.
 *
 * @deprecated This file will be removed entirely. Please update all imports to use tokens directly.
 * 
 * MIGRATION GUIDE:
 * ----------------
 * 1. Replace: @use "../sass/variables" as vars;
 *    With:    @use "../sass/tokens" as tokens;
 * 
 * 2. Replace all variable references:
 *    - vars.$shadow-light → tokens.shadow('sm')
 *    - vars.$shadow-medium → tokens.shadow('md')
 *    - vars.$shadow-heavy → tokens.shadow('lg')
 *    - vars.$scale-hover-small → tokens.scale('sm')
 *    - vars.$scale-hover-medium → tokens.scale('md')
 *    - vars.$scale-hover-large → tokens.scale('lg')
 * 
 * 3. CSS custom properties remain the same as they are generated from tokens.
 *
 * @see _tokens.scss - Single source of truth for all design tokens
 * @see _css-variables.scss - For CSS custom property generation
 */

@use "sass:map";
@use "tokens" as tokens;

// Emit a clear removal warning when this file is imported
@warn "REMOVAL NOTICE: The _variables.scss file is now just a forwarding module and will be removed entirely in the next version. Update all imports to use tokens directly.";

// For backward compatibility - these can be safely removed once all files are updated
$theme-transition-properties: (
  background-color,
  color,
  border-color,
  transform,
  opacity,
  box-shadow
);

$scale-hover-small: tokens.scale('sm');
$scale-hover-medium: tokens.scale('md');
$scale-hover-large: tokens.scale('lg');

$shadow-light: tokens.shadow('sm');
$shadow-medium: tokens.shadow('md');
$shadow-heavy: tokens.shadow('lg');

// Forward export block to maintain JavaScript compatibility
:export {
  // Theme colors
  themeSageBase: tokens.theme-color('sage');
  themeCoralBase: tokens.theme-color('coral');
  themeSandBase: tokens.theme-color('sand');
  themeIndigoBase: tokens.theme-color('indigo');
  
  // Breakpoints
  breakpointSmallest: tokens.breakpoint('smallest');
  breakpointSmall: tokens.breakpoint('small');
  breakpointMedium: tokens.breakpoint('medium');
  breakpointLarge: tokens.breakpoint('large');
  breakpointLargest: tokens.breakpoint('largest');
}
