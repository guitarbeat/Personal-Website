/**
 * Shadow Functions and Mixins
 *
 * This module provides utility functions and mixins for working with shadows.
 * All shadow values are defined in _tokens.scss - this file only provides
 * convenience functions for accessing and applying those shadows.
 *
 * For new components, prefer using these mixins over directly applying
 * shadow values to ensure consistency across the application.
 */

@use "sass:map";
@use "tokens" as tokens;

/**
 * Get a shadow value for a specific elevation level and theme
 * @param {String} $level - The elevation level (0, 1, 2, 3, etc.)
 * @param {String} $theme - The theme name (light, dark)
 * @return {String} The shadow value
 */
@function shadow-value($level, $theme: 'light') {
  @return map.get(map.get(tokens.$shadow-values, $theme), $level);
}

/**
 * Get a shadow value for a specific UI state and theme
 * @param {String} $state - The UI state (default, hover, active, focus)
 * @param {String} $theme - The theme name (light, dark)
 * @return {String} The shadow value
 */
@function state-shadow($state, $theme: 'light') {
  @return map.get(map.get(tokens.$state-shadows, $theme), $state);
}

/**
 * Get a shadow value for a specific component and theme
 * @param {String} $component - The component name (card, button, dialog, etc.)
 * @param {String} $theme - The theme name (light, dark)
 * @return {String} The shadow value
 */
@function component-shadow($component, $theme: 'light') {
  @return map.get(map.get(tokens.$component-shadows, $theme), $component);
}

/**
 * Get an inner shadow value for a specific intensity and theme
 * @param {String} $intensity - The intensity (light, medium, heavy)
 * @param {String} $theme - The theme name (light, dark)
 * @return {String} The shadow value
 */
@function inner-shadow($intensity, $theme: 'light') {
  @return map.get(map.get(tokens.$inner-shadows, $theme), $intensity);
}

/**
 * Apply an elevation shadow
 * @param {String} $level - The elevation level (0, 1, 2, 3, etc.)
 */
@mixin elevation-shadow($level) {
  box-shadow: var(--shadow-#{$level}, #{shadow-value($level)});
}

/**
 * Apply a state shadow
 * @param {String} $state - The UI state (default, hover, active, focus)
 */
@mixin state-shadow($state) {
  box-shadow: var(--shadow-#{$state}, #{state-shadow($state)});
}

/**
 * Apply a component shadow
 * @param {String} $component - The component name (card, button, dialog, etc.)
 */
@mixin component-shadow($component) {
  box-shadow: var(--shadow-#{$component}, #{component-shadow($component)});
}

/**
 * Apply an inner shadow
 * @param {String} $intensity - The intensity (light, medium, heavy)
 */
@mixin inner-shadow($intensity) {
  box-shadow: var(--inner-shadow-#{$intensity}, #{inner-shadow($intensity)});
}

/**
 * Apply a combined shadow (elevation + inner)
 * @param {String} $elevation - The elevation level (0, 1, 2, 3, etc.)
 * @param {String|null} $inner - The inner shadow intensity (light, medium, heavy)
 */
@mixin combined-shadow($elevation, $inner: null) {
  @if $inner {
    box-shadow: var(--shadow-#{$elevation}, #{shadow-value($elevation)}),
                var(--inner-shadow-#{$inner}, #{inner-shadow($inner)});
  } @else {
    box-shadow: var(--shadow-#{$elevation}, #{shadow-value($elevation)});
  }
}

/**
 * Apply a focus shadow
 * @param {String} $color - The color name from the theme colors
 */
@mixin focus-shadow($color: 'primary') {
  box-shadow: var(--shadow-focus, 0 0 0 2px rgba(var(--color-#{$color}-rgb), 0.2));
}

/**
 * Apply hover state shadow
 * Applies a transition and hover state shadow
 */
@mixin hover-shadow {
  transition: box-shadow 0.3s ease;
  
  &:hover {
    @include state-shadow('hover');
  }
}

/**
 * Apply active state shadow
 */
@mixin active-shadow {
  &:active {
    @include state-shadow('active');
  }
}

/**
 * Apply interactive shadows (hover and active)
 * Complete mixin for interactive elements that combines
 * base, hover, and active states with transitions
 * 
 * @param {String} $base-level - The base elevation level
 */
@mixin interactive-shadow($base-level: '1') {
  @include elevation-shadow($base-level);

  transition: box-shadow 0.3s ease;
  
  &:hover {
    @include state-shadow('hover');
  }
  
  &:active {
    @include state-shadow('active');
  }
} 