////////////////////////////////////
// TYPOGRAPHY FUNCTIONS AND MIXINS
////////////////////////////////////

@use "sass:map";
@use "tokens" as tokens;
@use "breakpoints" as bp;

// Get a value from the type scale
@function type-scale($size) {
  @return map.get(tokens.$type-scale, $size);
}

// Get a semantic type size
@function semantic-type($size) {
  @return map.get(tokens.$semantic-type-scale, $size);
}

// Get a heading style property
@function heading-style($level, $property) {
  @return map.get(map.get(tokens.$heading-styles, $level), $property);
}

// Get a text style property
@function text-style($style, $property) {
  @return map.get(map.get(tokens.$text-styles, $style), $property);
}

// Get a fluid typography value
@function fluid-type($style, $property) {
  @return map.get(map.get(tokens.$fluid-typography, $style), $property);
}

// Get a responsive typography value
@function responsive-type($style, $breakpoint) {
  @return map.get(map.get(tokens.$responsive-typography, $style), $breakpoint);
}

// Get a vertical rhythm value
@function vertical-rhythm($size) {
  @return map.get(tokens.$vertical-rhythm, $size);
}

// Apply heading styles
@mixin heading($level) {
  font-size: heading-style($level, 'font-size');
  font-weight: heading-style($level, 'font-weight');
  line-height: heading-style($level, 'line-height');
  letter-spacing: heading-style($level, 'letter-spacing');
  margin-top: heading-style($level, 'margin-top');
  margin-bottom: heading-style($level, 'margin-bottom');
}

// Apply text styles
@mixin text($style) {
  font-size: text-style($style, 'font-size');
  font-weight: text-style($style, 'font-weight');
  line-height: text-style($style, 'line-height');
  letter-spacing: text-style($style, 'letter-spacing');
  
  @if map.has-key(map.get(tokens.$text-styles, $style), 'margin-bottom') {
    margin-bottom: text-style($style, 'margin-bottom');
  }
  
  @if map.has-key(map.get(tokens.$text-styles, $style), 'text-transform') {
    text-transform: text-style($style, 'text-transform');
  }
}

// Apply fluid typography
@mixin fluid-type($style) {
  font-size: clamp(
    fluid-type($style, 'min'),
    calc(1rem + 2vw),
    fluid-type($style, 'max')
  );
}

// Apply responsive typography
@mixin responsive-type($style) {
  font-size: responsive-type($style, 'mobile');
  
  @include bp.respond('tablet') {
    font-size: responsive-type($style, 'tablet');
  }
  
  @include bp.respond('desktop') {
    font-size: responsive-type($style, 'desktop');
  }
}

// Apply font family
@mixin font-family($family) {
  font-family: map.get(tokens.$font-families, $family);
}

// Apply font weight
@mixin font-weight($weight) {
  font-weight: map.get(tokens.$font-weights, $weight);
}

// Apply line height
@mixin line-height($height) {
  line-height: map.get(tokens.$line-heights, $height);
}

// Apply vertical rhythm
@mixin vertical-rhythm($size: 'base') {
  margin-bottom: vertical-rhythm($size);
} 